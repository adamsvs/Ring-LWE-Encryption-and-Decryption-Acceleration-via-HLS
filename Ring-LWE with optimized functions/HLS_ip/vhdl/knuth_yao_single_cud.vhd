-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity knuth_yao_single_cud_rom is 
    generic(
             dwidth     : integer := 6; 
             awidth     : integer := 8; 
             mem_size    : integer := 224
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of knuth_yao_single_cud_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "001101", 1 => "001010", 2 => "001101", 3 => "001010", 4 => "001101", 
    5 => "001010", 6 => "001101", 7 => "001010", 8 => "001101", 9 => "001010", 
    10 => "001101", 11 => "001010", 12 => "001101", 13 => "001010", 14 => "001101", 
    15 => "001010", 16 => "001101", 17 => "001010", 18 => "001101", 19 => "001010", 
    20 => "001101", 21 => "001010", 22 => "001101", 23 => "001010", 24 => "001101", 
    25 => "001010", 26 => "001101", 27 => "001010", 28 => "001101", 29 => "001010", 
    30 => "001101", 31 => "001010", 32 => "000111", 33 => "000110", 34 => "000111", 
    35 => "000110", 36 => "000111", 37 => "000110", 38 => "000111", 39 => "000110", 
    40 => "000111", 41 => "000110", 42 => "000111", 43 => "000110", 44 => "000111", 
    45 => "000110", 46 => "000111", 47 => "000110", 48 => "000111", 49 => "000110", 
    50 => "000111", 51 => "000110", 52 => "000111", 53 => "000110", 54 => "000111", 
    55 => "000110", 56 => "000111", 57 => "000110", 58 => "000111", 59 => "000110", 
    60 => "000111", 61 => "000110", 62 => "000111", 63 => "000110", 64 => "000101", 
    65 => "000100", 66 => "000101", 67 => "000100", 68 => "000101", 69 => "000100", 
    70 => "000101", 71 => "000100", 72 => "000101", 73 => "000100", 74 => "000101", 
    75 => "000100", 76 => "000101", 77 => "000100", 78 => "000101", 79 => "000100", 
    80 => "000101", 81 => "000100", 82 => "000101", 83 => "000100", 84 => "000101", 
    85 => "000100", 86 => "000101", 87 => "000100", 88 => "000101", 89 => "000100", 
    90 => "000101", 91 => "000100", 92 => "000101", 93 => "000100", 94 => "000101", 
    95 => "000100", 96 => "000000", 97 => "001110", 98 => "000000", 99 => "001100", 
    100 => "000000", 101 => "001110", 102 => "000000", 103 => "001100", 104 => "000000", 
    105 => "001110", 106 => "000000", 107 => "001100", 108 => "000000", 109 => "001110", 
    110 => "000000", 111 => "001100", 112 => "000000", 113 => "001110", 114 => "000000", 
    115 => "001100", 116 => "000000", 117 => "001110", 118 => "000000", 119 => "001100", 
    120 => "000000", 121 => "001110", 122 => "000000", 123 => "001100", 124 => "000000", 
    125 => "001110", 126 => "000000", 127 => "001100", 128 => "001011", 129 => "001000", 
    130 => "001010", 131 => "000011", 132 => "001011", 133 => "001000", 134 => "001010", 
    135 => "000011", 136 => "001011", 137 => "001000", 138 => "001010", 139 => "000011", 
    140 => "001011", 141 => "001000", 142 => "001010", 143 => "000011", 144 => "001011", 
    145 => "001000", 146 => "001010", 147 => "000011", 148 => "001011", 149 => "001000", 
    150 => "001010", 151 => "000011", 152 => "001011", 153 => "001000", 154 => "001010", 
    155 => "000011", 156 => "001011", 157 => "001000", 158 => "001010", 159 => "000011", 
    160 => "001111", 161 => "001000", 162 => "001010", 163 => "000001", 164 => "001101", 
    165 => "000110", 166 => "001001", 167 => "010000", 168 => "001111", 169 => "001000", 
    170 => "001010", 171 => "000001", 172 => "001101", 173 => "000110", 174 => "001001", 
    175 => "001110", 176 => "001111", 177 => "001000", 178 => "001010", 179 => "000001", 
    180 => "001101", 181 => "000110", 182 => "001001", 183 => "010000", 184 => "001111", 
    185 => "001000", 186 => "001010", 187 => "000001", 188 => "001101", 189 => "000110", 
    190 => "001001", 191 => "001110", 192 => "001101", 193 => "001110", 194 => "000111", 
    195 => "100011", 196 => "001011", 197 to 198=> "000000", 199 => "100111", 200 => "001100", 
    201 => "000111", 202 => "000110", 203 => "100101", 204 => "001001", 205 => "100001", 
    206 => "010001", 207 => "101001", 208 => "001101", 209 => "001000", 210 => "000111", 
    211 => "100100", 212 => "001011", 213 => "100000", 214 => "000000", 215 => "101000", 
    216 => "001100", 217 => "000100", 218 => "000110", 219 => "100110", 220 => "001001", 
    221 => "100010", 222 => "001111", 223 => "101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity knuth_yao_single_cud is
    generic (
        DataWidth : INTEGER := 6;
        AddressRange : INTEGER := 224;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of knuth_yao_single_cud is
    component knuth_yao_single_cud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    knuth_yao_single_cud_rom_U :  component knuth_yao_single_cud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


