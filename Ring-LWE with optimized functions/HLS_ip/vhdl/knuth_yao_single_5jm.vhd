-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity knuth_yao_single_5jm_rom is 
    generic(
             dwidth     : integer := 1; 
             awidth     : integer := 7; 
             mem_size    : integer := 109
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of knuth_yao_single_5jm_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 2=> "0", 3 => "1", 4 => "0", 5 to 6=> "1", 7 => "0", 8 => "1", 9 to 10=> "0", 
    11 to 13=> "1", 14 => "0", 15 => "1", 16 => "0", 17 to 18=> "1", 19 to 20=> "0", 21 to 22=> "1", 
    23 to 25=> "0", 26 to 28=> "1", 29 to 34=> "0", 35 => "1", 36 => "0", 37 => "1", 38 => "0", 
    39 to 40=> "1", 41 => "0", 42 to 43=> "1", 44 => "0", 45 => "1", 46 => "0", 47 to 49=> "1", 
    50 => "0", 51 => "1", 52 to 53=> "0", 54 => "1", 55 => "0", 56 to 57=> "1", 58 to 60=> "0", 
    61 => "1", 62 => "0", 63 => "1", 64 to 65=> "0", 66 to 67=> "1", 68 to 69=> "0", 70 to 72=> "1", 
    73 to 75=> "0", 76 to 81=> "1", 82 => "0", 83 => "1", 84 => "0", 85 => "1", 86 to 87=> "0", 
    88 => "1", 89 to 90=> "0", 91 => "1", 92 => "0", 93 => "1", 94 to 96=> "0", 97 => "1", 
    98 => "0", 99 to 100=> "1", 101 => "0", 102 => "1", 103 to 104=> "0", 105 to 107=> "1", 108 => "0" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity knuth_yao_single_5jm is
    generic (
        DataWidth : INTEGER := 1;
        AddressRange : INTEGER := 109;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of knuth_yao_single_5jm is
    component knuth_yao_single_5jm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    knuth_yao_single_5jm_rom_U :  component knuth_yao_single_5jm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


