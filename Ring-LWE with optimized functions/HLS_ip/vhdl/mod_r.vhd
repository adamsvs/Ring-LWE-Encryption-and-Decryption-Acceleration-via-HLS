-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mod_r is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (14 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of mod_r is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_8883FB99BF246 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000001000100010000011111110111001100110111111001001000110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv45_1E01 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001111000000001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_1E00 : STD_LOGIC_VECTOR (13 downto 0) := "01111000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_1E01 : STD_LOGIC_VECTOR (13 downto 0) := "01111000000001";

    signal x_read_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lowbits_r_fu_56_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowbits_r_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowbits_l_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret3_fu_137_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret3_reg_185 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_reg_191 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal lowbits_fu_50_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowbits_fu_50_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pp1_fu_73_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp2_fu_82_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp1_fu_73_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_7_fu_88_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal pp1_1_cast_fu_98_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_fu_82_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_1_fu_102_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_8_fu_108_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_122_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret3_cast_fu_118_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_cast_cast_fu_129_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_154_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_33_cast_fu_159_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_32_cast_fu_151_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_fu_163_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal x_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal pp1_fu_73_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_fu_82_p10 : STD_LOGIC_VECTOR (44 downto 0);


begin




    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= tmp_2_fu_163_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                lowbits_l_reg_180 <= lowbits_fu_50_p2(63 downto 32);
                lowbits_r_reg_175 <= lowbits_r_fu_56_p1;
                ret3_reg_185 <= ret3_fu_137_p2;
                tmp_6_reg_191 <= ret3_fu_137_p2(13 downto 13);
                x_read_reg_170 <= x_int_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                x_int_reg <= x;
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(tmp_2_fu_163_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= tmp_2_fu_163_p3;
        end if; 
    end process;

    lowbits_fu_50_p1 <= x_int_reg;
    lowbits_fu_50_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv64_8883FB99BF246) * signed(lowbits_fu_50_p1))), 64));
    lowbits_r_fu_56_p1 <= lowbits_fu_50_p2(32 - 1 downto 0);
    pp1_1_cast_fu_98_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_88_p4),45));
    pp1_fu_73_p1 <= pp1_fu_73_p10(32 - 1 downto 0);
    pp1_fu_73_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lowbits_r_reg_175),45));
    pp1_fu_73_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv45_1E01) * unsigned(pp1_fu_73_p1), 45));
    pp2_1_fu_102_p2 <= std_logic_vector(unsigned(pp1_1_cast_fu_98_p1) + unsigned(pp2_fu_82_p2));
    pp2_fu_82_p1 <= pp2_fu_82_p10(32 - 1 downto 0);
    pp2_fu_82_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lowbits_l_reg_180),45));
    pp2_fu_82_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv45_1E01) * unsigned(pp2_fu_82_p1), 45));
    ret3_cast_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_108_p4),14));
    ret3_fu_137_p2 <= std_logic_vector(unsigned(ret3_cast_fu_118_p1) - unsigned(tmp_29_cast_cast_fu_129_p3));
    tmp_29_cast_cast_fu_129_p3 <= 
        ap_const_lv14_1E00 when (tmp_5_fu_122_p3(0) = '1') else 
        ap_const_lv14_0;
    tmp_2_fu_163_p3 <= 
        tmp_33_cast_fu_159_p1 when (tmp_6_reg_191(0) = '1') else 
        tmp_32_cast_fu_151_p1;
        tmp_32_cast_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret3_reg_185),15));

    tmp_33_cast_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_154_p2),15));
    tmp_5_fu_122_p3 <= x_read_reg_170(31 downto 31);
    tmp_7_fu_88_p4 <= pp1_fu_73_p2(44 downto 32);
    tmp_8_fu_108_p4 <= pp2_1_fu_102_p2(44 downto 32);
    tmp_s_fu_154_p2 <= std_logic_vector(unsigned(ap_const_lv14_1E01) + unsigned(ret3_reg_185));
end behav;
