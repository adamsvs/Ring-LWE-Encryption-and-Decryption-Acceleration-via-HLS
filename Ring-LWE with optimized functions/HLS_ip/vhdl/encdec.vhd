-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encdec is
generic (
    C_M_AXI_M_AXI_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_AXI_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_AXI_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_AXI_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_AXI_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_AXI_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_AXI_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_AXI_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_AXI_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_AXI_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_AXI_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_m_axi_AWVALID : OUT STD_LOGIC;
    m_axi_m_axi_AWREADY : IN STD_LOGIC;
    m_axi_m_axi_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_AXI_ADDR_WIDTH-1 downto 0);
    m_axi_m_axi_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_AXI_ID_WIDTH-1 downto 0);
    m_axi_m_axi_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_axi_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_axi_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_axi_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_axi_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_axi_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_axi_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_axi_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_axi_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_AXI_AWUSER_WIDTH-1 downto 0);
    m_axi_m_axi_WVALID : OUT STD_LOGIC;
    m_axi_m_axi_WREADY : IN STD_LOGIC;
    m_axi_m_axi_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_AXI_DATA_WIDTH-1 downto 0);
    m_axi_m_axi_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_AXI_DATA_WIDTH/8-1 downto 0);
    m_axi_m_axi_WLAST : OUT STD_LOGIC;
    m_axi_m_axi_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_AXI_ID_WIDTH-1 downto 0);
    m_axi_m_axi_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_AXI_WUSER_WIDTH-1 downto 0);
    m_axi_m_axi_ARVALID : OUT STD_LOGIC;
    m_axi_m_axi_ARREADY : IN STD_LOGIC;
    m_axi_m_axi_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_AXI_ADDR_WIDTH-1 downto 0);
    m_axi_m_axi_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_AXI_ID_WIDTH-1 downto 0);
    m_axi_m_axi_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_axi_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_axi_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_axi_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_axi_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_axi_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_axi_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_axi_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_axi_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_AXI_ARUSER_WIDTH-1 downto 0);
    m_axi_m_axi_RVALID : IN STD_LOGIC;
    m_axi_m_axi_RREADY : OUT STD_LOGIC;
    m_axi_m_axi_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_AXI_DATA_WIDTH-1 downto 0);
    m_axi_m_axi_RLAST : IN STD_LOGIC;
    m_axi_m_axi_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_AXI_ID_WIDTH-1 downto 0);
    m_axi_m_axi_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_AXI_RUSER_WIDTH-1 downto 0);
    m_axi_m_axi_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_axi_BVALID : IN STD_LOGIC;
    m_axi_m_axi_BREADY : OUT STD_LOGIC;
    m_axi_m_axi_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_axi_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_AXI_ID_WIDTH-1 downto 0);
    m_axi_m_axi_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_AXI_BUSER_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_AWVALID : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_AWREADY : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_WVALID : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_WREADY : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH/8-1 downto 0);
    s_axi_S_AXI_BUNDLE_ARVALID : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_ARREADY : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_RVALID : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_RREADY : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_S_AXI_BUNDLE_BVALID : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_BREADY : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of encdec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encdec,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=17.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=22.431750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=191,HLS_SYN_FF=10760,HLS_SYN_LUT=16135}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_ce0 : STD_LOGIC;
    signal c1_we0 : STD_LOGIC;
    signal c1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c2_ce0 : STD_LOGIC;
    signal c2_we0 : STD_LOGIC;
    signal c2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r2_ce0 : STD_LOGIC;
    signal r2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal arr : STD_LOGIC_VECTOR (31 downto 0);
    signal m_axi_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal m_axi_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond_reg_642 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter1_exitcond_reg_642 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axi_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal m_axi_AWVALID : STD_LOGIC;
    signal m_axi_AWREADY : STD_LOGIC;
    signal m_axi_WVALID : STD_LOGIC;
    signal m_axi_WREADY : STD_LOGIC;
    signal m_axi_ARREADY : STD_LOGIC;
    signal m_axi_RVALID : STD_LOGIC;
    signal m_axi_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal m_axi_RLAST : STD_LOGIC;
    signal m_axi_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axi_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axi_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_axi_BVALID : STD_LOGIC;
    signal m_axi_BREADY : STD_LOGIC;
    signal m_axi_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_axi_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axi_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i_i_reg_290 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_i3_i_reg_301 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_312 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_axi_addr_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_RLWE_enc2_fu_323_ap_done : STD_LOGIC;
    signal exitcond_i_i_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_i_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_i_i_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_i_i_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_494_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_593 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal c1_addr_1_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter1_c1_addr_1_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_c1_addr_1_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_170_i_i_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_170_i_i_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal exitcond_i4_i_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i4_i_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_reg_pp1_iter1_exitcond_i4_i_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter2_exitcond_i4_i_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_9_fu_525_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_9_reg_617 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal c1_addr_2_reg_622 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter1_c1_addr_2_reg_622 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter2_c1_addr_2_reg_622 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_176_i_i_fu_545_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_176_i_i_reg_632 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state11_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state15_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal tmp_176_i_i_cast_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state18_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state20_pp2_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_WREADY : STD_LOGIC;
    signal ap_block_state20_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_4_fu_566_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal c1_load_reg_656 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_AWREADY : STD_LOGIC;
    signal grp_inv_ntt2_fu_457_ap_done : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state18 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_323_ap_start : STD_LOGIC;
    signal grp_RLWE_enc2_fu_323_ap_idle : STD_LOGIC;
    signal grp_RLWE_enc2_fu_323_ap_ready : STD_LOGIC;
    signal grp_RLWE_enc2_fu_323_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_RLWE_enc2_fu_323_a_ce0 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_323_c1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_RLWE_enc2_fu_323_c1_ce0 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_323_c1_we0 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_323_c1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_RLWE_enc2_fu_323_c2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_RLWE_enc2_fu_323_c2_ce0 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_323_c2_we0 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_323_c2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_RLWE_enc2_fu_323_m_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_RLWE_enc2_fu_323_m_ce0 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_323_p_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_RLWE_enc2_fu_323_p_ce0 : STD_LOGIC;
    signal grp_inv_ntt2_fu_457_ap_start : STD_LOGIC;
    signal grp_inv_ntt2_fu_457_ap_idle : STD_LOGIC;
    signal grp_inv_ntt2_fu_457_ap_ready : STD_LOGIC;
    signal grp_inv_ntt2_fu_457_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_inv_ntt2_fu_457_a_ce0 : STD_LOGIC;
    signal grp_inv_ntt2_fu_457_a_we0 : STD_LOGIC;
    signal grp_inv_ntt2_fu_457_a_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mod_r_fu_463_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_463_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mod_r_fu_463_ap_ce : STD_LOGIC;
    signal ap_phi_mux_j_i_i_phi_fu_294_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_i3_i_phi_fu_305_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_reg_grp_RLWE_enc2_fu_323_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_inv_ntt2_fu_457_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_i_i_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_i_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_WREADY : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal p_trunc_ext_fu_514_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal p_trunc4_ext_fu_555_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal arr1_fu_468_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i8_i_cast_fu_537_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_175_i_i_cast_fu_541_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_170_i_i_fu_577_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_170_i_i_fu_577_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal tmp_170_i_i_fu_577_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_170_i_i_fu_577_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component RLWE_enc2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        c1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c1_ce0 : OUT STD_LOGIC;
        c1_we0 : OUT STD_LOGIC;
        c1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        c1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        c2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c2_ce0 : OUT STD_LOGIC;
        c2_we0 : OUT STD_LOGIC;
        c2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        c2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        m_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component inv_ntt2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mod_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component encdec_mul_mul_167jG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encdec_S_AXI_BUNDLE_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_ce0 : IN STD_LOGIC;
        a_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        c1_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        c1_ce0 : IN STD_LOGIC;
        c1_we0 : IN STD_LOGIC;
        c1_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        c1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        c2_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        c2_ce0 : IN STD_LOGIC;
        c2_we0 : IN STD_LOGIC;
        c2_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        c2_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        m_ce0 : IN STD_LOGIC;
        m_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ce0 : IN STD_LOGIC;
        p_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r2_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        r2_ce0 : IN STD_LOGIC;
        r2_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        arr : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encdec_m_axi_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    encdec_S_AXI_BUNDLE_s_axi_U : component encdec_S_AXI_BUNDLE_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_S_AXI_BUNDLE_AWVALID,
        AWREADY => s_axi_S_AXI_BUNDLE_AWREADY,
        AWADDR => s_axi_S_AXI_BUNDLE_AWADDR,
        WVALID => s_axi_S_AXI_BUNDLE_WVALID,
        WREADY => s_axi_S_AXI_BUNDLE_WREADY,
        WDATA => s_axi_S_AXI_BUNDLE_WDATA,
        WSTRB => s_axi_S_AXI_BUNDLE_WSTRB,
        ARVALID => s_axi_S_AXI_BUNDLE_ARVALID,
        ARREADY => s_axi_S_AXI_BUNDLE_ARREADY,
        ARADDR => s_axi_S_AXI_BUNDLE_ARADDR,
        RVALID => s_axi_S_AXI_BUNDLE_RVALID,
        RREADY => s_axi_S_AXI_BUNDLE_RREADY,
        RDATA => s_axi_S_AXI_BUNDLE_RDATA,
        RRESP => s_axi_S_AXI_BUNDLE_RRESP,
        BVALID => s_axi_S_AXI_BUNDLE_BVALID,
        BREADY => s_axi_S_AXI_BUNDLE_BREADY,
        BRESP => s_axi_S_AXI_BUNDLE_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a_address0 => grp_RLWE_enc2_fu_323_a_address0,
        a_ce0 => grp_RLWE_enc2_fu_323_a_ce0,
        a_q0 => a_q0,
        c1_address0 => c1_address0,
        c1_ce0 => c1_ce0,
        c1_we0 => c1_we0,
        c1_d0 => c1_d0,
        c1_q0 => c1_q0,
        c2_address0 => c2_address0,
        c2_ce0 => c2_ce0,
        c2_we0 => c2_we0,
        c2_d0 => grp_RLWE_enc2_fu_323_c2_d0,
        c2_q0 => c2_q0,
        m_address0 => grp_RLWE_enc2_fu_323_m_address0,
        m_ce0 => grp_RLWE_enc2_fu_323_m_ce0,
        m_q0 => m_q0,
        p_address0 => grp_RLWE_enc2_fu_323_p_address0,
        p_ce0 => grp_RLWE_enc2_fu_323_p_ce0,
        p_q0 => p_q0,
        r2_address0 => r2_address0,
        r2_ce0 => r2_ce0,
        r2_q0 => r2_q0,
        arr => arr);

    encdec_m_axi_m_axi_U : component encdec_m_axi_m_axi
    generic map (
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_M_AXI_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_M_AXI_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_M_AXI_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_M_AXI_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_M_AXI_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_M_AXI_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_M_AXI_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_M_AXI_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_M_AXI_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_AXI_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_AXI_CACHE_VALUE)
    port map (
        AWVALID => m_axi_m_axi_AWVALID,
        AWREADY => m_axi_m_axi_AWREADY,
        AWADDR => m_axi_m_axi_AWADDR,
        AWID => m_axi_m_axi_AWID,
        AWLEN => m_axi_m_axi_AWLEN,
        AWSIZE => m_axi_m_axi_AWSIZE,
        AWBURST => m_axi_m_axi_AWBURST,
        AWLOCK => m_axi_m_axi_AWLOCK,
        AWCACHE => m_axi_m_axi_AWCACHE,
        AWPROT => m_axi_m_axi_AWPROT,
        AWQOS => m_axi_m_axi_AWQOS,
        AWREGION => m_axi_m_axi_AWREGION,
        AWUSER => m_axi_m_axi_AWUSER,
        WVALID => m_axi_m_axi_WVALID,
        WREADY => m_axi_m_axi_WREADY,
        WDATA => m_axi_m_axi_WDATA,
        WSTRB => m_axi_m_axi_WSTRB,
        WLAST => m_axi_m_axi_WLAST,
        WID => m_axi_m_axi_WID,
        WUSER => m_axi_m_axi_WUSER,
        ARVALID => m_axi_m_axi_ARVALID,
        ARREADY => m_axi_m_axi_ARREADY,
        ARADDR => m_axi_m_axi_ARADDR,
        ARID => m_axi_m_axi_ARID,
        ARLEN => m_axi_m_axi_ARLEN,
        ARSIZE => m_axi_m_axi_ARSIZE,
        ARBURST => m_axi_m_axi_ARBURST,
        ARLOCK => m_axi_m_axi_ARLOCK,
        ARCACHE => m_axi_m_axi_ARCACHE,
        ARPROT => m_axi_m_axi_ARPROT,
        ARQOS => m_axi_m_axi_ARQOS,
        ARREGION => m_axi_m_axi_ARREGION,
        ARUSER => m_axi_m_axi_ARUSER,
        RVALID => m_axi_m_axi_RVALID,
        RREADY => m_axi_m_axi_RREADY,
        RDATA => m_axi_m_axi_RDATA,
        RLAST => m_axi_m_axi_RLAST,
        RID => m_axi_m_axi_RID,
        RUSER => m_axi_m_axi_RUSER,
        RRESP => m_axi_m_axi_RRESP,
        BVALID => m_axi_m_axi_BVALID,
        BREADY => m_axi_m_axi_BREADY,
        BRESP => m_axi_m_axi_BRESP,
        BID => m_axi_m_axi_BID,
        BUSER => m_axi_m_axi_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => m_axi_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => m_axi_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => m_axi_RDATA,
        I_RID => m_axi_RID,
        I_RUSER => m_axi_RUSER,
        I_RRESP => m_axi_RRESP,
        I_RLAST => m_axi_RLAST,
        I_AWVALID => m_axi_AWVALID,
        I_AWREADY => m_axi_AWREADY,
        I_AWADDR => m_axi_addr_reg_583,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_100,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => m_axi_WVALID,
        I_WREADY => m_axi_WREADY,
        I_WDATA => c1_load_reg_656,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => m_axi_BVALID,
        I_BREADY => m_axi_BREADY,
        I_BRESP => m_axi_BRESP,
        I_BID => m_axi_BID,
        I_BUSER => m_axi_BUSER);

    grp_RLWE_enc2_fu_323 : component RLWE_enc2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_RLWE_enc2_fu_323_ap_start,
        ap_done => grp_RLWE_enc2_fu_323_ap_done,
        ap_idle => grp_RLWE_enc2_fu_323_ap_idle,
        ap_ready => grp_RLWE_enc2_fu_323_ap_ready,
        a_address0 => grp_RLWE_enc2_fu_323_a_address0,
        a_ce0 => grp_RLWE_enc2_fu_323_a_ce0,
        a_q0 => a_q0,
        c1_address0 => grp_RLWE_enc2_fu_323_c1_address0,
        c1_ce0 => grp_RLWE_enc2_fu_323_c1_ce0,
        c1_we0 => grp_RLWE_enc2_fu_323_c1_we0,
        c1_d0 => grp_RLWE_enc2_fu_323_c1_d0,
        c1_q0 => c1_q0,
        c2_address0 => grp_RLWE_enc2_fu_323_c2_address0,
        c2_ce0 => grp_RLWE_enc2_fu_323_c2_ce0,
        c2_we0 => grp_RLWE_enc2_fu_323_c2_we0,
        c2_d0 => grp_RLWE_enc2_fu_323_c2_d0,
        c2_q0 => c2_q0,
        m_address0 => grp_RLWE_enc2_fu_323_m_address0,
        m_ce0 => grp_RLWE_enc2_fu_323_m_ce0,
        m_q0 => m_q0,
        p_address0 => grp_RLWE_enc2_fu_323_p_address0,
        p_ce0 => grp_RLWE_enc2_fu_323_p_ce0,
        p_q0 => p_q0);

    grp_inv_ntt2_fu_457 : component inv_ntt2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_inv_ntt2_fu_457_ap_start,
        ap_done => grp_inv_ntt2_fu_457_ap_done,
        ap_idle => grp_inv_ntt2_fu_457_ap_idle,
        ap_ready => grp_inv_ntt2_fu_457_ap_ready,
        a_address0 => grp_inv_ntt2_fu_457_a_address0,
        a_ce0 => grp_inv_ntt2_fu_457_a_ce0,
        a_we0 => grp_inv_ntt2_fu_457_a_we0,
        a_d0 => grp_inv_ntt2_fu_457_a_d0,
        a_q0 => c1_q0);

    grp_mod_r_fu_463 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        x => grp_mod_r_fu_463_x,
        ap_return => grp_mod_r_fu_463_ap_return,
        ap_ce => grp_mod_r_fu_463_ap_ce);

    encdec_mul_mul_167jG_U97 : component encdec_mul_mul_167jG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_170_i_i_fu_577_p0,
        din1 => tmp_170_i_i_fu_577_p1,
        dout => tmp_170_i_i_fu_577_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_RLWE_enc2_fu_323_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((grp_RLWE_enc2_fu_323_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((not(((grp_inv_ntt2_fu_457_ap_done = ap_const_logic_0) or (ap_sig_ioackin_m_axi_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state18)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state18);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((not(((grp_inv_ntt2_fu_457_ap_done = ap_const_logic_0) or (ap_sig_ioackin_m_axi_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_RLWE_enc2_fu_323_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_RLWE_enc2_fu_323_ap_start <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_reg_grp_RLWE_enc2_fu_323_ap_start <= ap_const_logic_1;
                elsif ((grp_RLWE_enc2_fu_323_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_RLWE_enc2_fu_323_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_inv_ntt2_fu_457_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_inv_ntt2_fu_457_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_reg_grp_inv_ntt2_fu_457_ap_start <= ap_const_logic_1;
                elsif ((grp_inv_ntt2_fu_457_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_inv_ntt2_fu_457_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_m_axi_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                    if (not(((grp_inv_ntt2_fu_457_ap_done = ap_const_logic_0) or (ap_sig_ioackin_m_axi_AWREADY = ap_const_logic_0)))) then 
                        ap_reg_ioackin_m_axi_AWREADY <= ap_const_logic_0;
                    elsif (((grp_inv_ntt2_fu_457_ap_done = ap_const_logic_1) and (m_axi_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_m_axi_WREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_reg_pp2_iter1_exitcond_reg_642 = ap_const_lv1_0))) then
                    if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_WREADY <= ap_const_logic_0;
                    elsif (((m_axi_WREADY = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_01001))) then 
                        ap_reg_ioackin_m_axi_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_fu_560_p2 = ap_const_lv1_0))) then 
                i_reg_312 <= i_4_fu_566_p2;
            elsif ((not(((grp_inv_ntt2_fu_457_ap_done = ap_const_logic_0) or (ap_sig_ioackin_m_axi_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_reg_312 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_i3_i_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_i3_i_reg_301 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i4_i_reg_613 = ap_const_lv1_0))) then 
                j_i3_i_reg_301 <= j_9_reg_617;
            end if; 
        end if;
    end process;

    j_i_i_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_reg_589 = ap_const_lv1_0))) then 
                j_i_i_reg_290 <= j_reg_593;
            elsif (((grp_RLWE_enc2_fu_323_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_i_i_reg_290 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_c1_addr_1_reg_598 <= c1_addr_1_reg_598;
                ap_reg_pp0_iter1_exitcond_i_i_reg_589 <= exitcond_i_i_reg_589;
                ap_reg_pp0_iter2_c1_addr_1_reg_598 <= ap_reg_pp0_iter1_c1_addr_1_reg_598;
                ap_reg_pp0_iter2_exitcond_i_i_reg_589 <= ap_reg_pp0_iter1_exitcond_i_i_reg_589;
                exitcond_i_i_reg_589 <= exitcond_i_i_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ap_reg_pp1_iter1_c1_addr_2_reg_622 <= c1_addr_2_reg_622;
                ap_reg_pp1_iter1_exitcond_i4_i_reg_613 <= exitcond_i4_i_reg_613;
                ap_reg_pp1_iter2_c1_addr_2_reg_622 <= ap_reg_pp1_iter1_c1_addr_2_reg_622;
                ap_reg_pp1_iter2_exitcond_i4_i_reg_613 <= ap_reg_pp1_iter1_exitcond_i4_i_reg_613;
                exitcond_i4_i_reg_613 <= exitcond_i4_i_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                ap_reg_pp2_iter1_exitcond_reg_642 <= exitcond_reg_642;
                exitcond_reg_642 <= exitcond_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_fu_488_p2 = ap_const_lv1_0))) then
                c1_addr_1_reg_598 <= tmp_i_i_fu_500_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i4_i_fu_519_p2 = ap_const_lv1_0))) then
                c1_addr_2_reg_622 <= tmp_i5_i_fu_531_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_reg_642 = ap_const_lv1_0))) then
                c1_load_reg_656 <= c1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                j_9_reg_617 <= j_9_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_reg_593 <= j_fu_494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_RLWE_enc2_fu_323_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    m_axi_addr_reg_583(30 downto 0) <= tmp_46_fu_478_p1(32 - 1 downto 0)(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_i_i_reg_589 = ap_const_lv1_0))) then
                tmp_170_i_i_reg_608 <= tmp_170_i_i_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_i4_i_reg_613 = ap_const_lv1_0))) then
                tmp_176_i_i_reg_632 <= tmp_176_i_i_fu_545_p2;
            end if;
        end if;
    end process;
    m_axi_addr_reg_583(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state17, ap_enable_reg_pp2_iter2, ap_CS_fsm_state25, m_axi_BVALID, ap_CS_fsm_state2, grp_RLWE_enc2_fu_323_ap_done, exitcond_i_i_fu_488_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, exitcond_i4_i_fu_519_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, exitcond_fu_560_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1_subdone, ap_enable_reg_pp1_iter2, ap_sig_ioackin_m_axi_AWREADY, grp_inv_ntt2_fu_457_ap_done, ap_block_pp2_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_RLWE_enc2_fu_323_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_i_fu_488_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_i_fu_488_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_i4_i_fu_519_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_i4_i_fu_519_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if ((not(((grp_inv_ntt2_fu_457_ap_done = ap_const_logic_0) or (ap_sig_ioackin_m_axi_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (exitcond_fu_560_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (exitcond_fu_560_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((m_axi_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(7);
    ap_CS_fsm_state17 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(14);
    ap_CS_fsm_state9 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state20_io)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state20_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state20_io)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state20_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;

        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_io_assign_proc : process(ap_reg_pp2_iter1_exitcond_reg_642, ap_sig_ioackin_m_axi_WREADY)
    begin
                ap_block_state20_io <= ((ap_sig_ioackin_m_axi_WREADY = ap_const_logic_0) and (ap_reg_pp2_iter1_exitcond_reg_642 = ap_const_lv1_0));
    end process;

        ap_block_state20_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_i_i_fu_488_p2)
    begin
        if ((exitcond_i_i_fu_488_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state10_assign_proc : process(exitcond_i4_i_fu_519_p2)
    begin
        if ((exitcond_i4_i_fu_519_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state18_assign_proc : process(exitcond_fu_560_p2)
    begin
        if ((exitcond_fu_560_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state25, m_axi_BVALID)
    begin
        if (((m_axi_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_i3_i_phi_fu_305_p4_assign_proc : process(j_i3_i_reg_301, exitcond_i4_i_reg_613, ap_CS_fsm_pp1_stage0, j_9_reg_617, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i4_i_reg_613 = ap_const_lv1_0))) then 
            ap_phi_mux_j_i3_i_phi_fu_305_p4 <= j_9_reg_617;
        else 
            ap_phi_mux_j_i3_i_phi_fu_305_p4 <= j_i3_i_reg_301;
        end if; 
    end process;


    ap_phi_mux_j_i_i_phi_fu_294_p4_assign_proc : process(j_i_i_reg_290, exitcond_i_i_reg_589, ap_CS_fsm_pp0_stage0, j_reg_593, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_reg_589 = ap_const_lv1_0))) then 
            ap_phi_mux_j_i_i_phi_fu_294_p4 <= j_reg_593;
        else 
            ap_phi_mux_j_i_i_phi_fu_294_p4 <= j_i_i_reg_290;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25, m_axi_BVALID)
    begin
        if (((m_axi_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_m_axi_AWREADY_assign_proc : process(m_axi_AWREADY, ap_reg_ioackin_m_axi_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_AWREADY <= m_axi_AWREADY;
        else 
            ap_sig_ioackin_m_axi_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_WREADY_assign_proc : process(m_axi_WREADY, ap_reg_ioackin_m_axi_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_WREADY <= m_axi_WREADY;
        else 
            ap_sig_ioackin_m_axi_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    arr1_fu_468_p4 <= arr(31 downto 1);

    c1_address0_assign_proc : process(ap_CS_fsm_state17, ap_block_pp2_stage0, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_reg_pp0_iter2_c1_addr_1_reg_598, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_reg_pp1_iter2_c1_addr_2_reg_622, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2, grp_RLWE_enc2_fu_323_c1_address0, grp_inv_ntt2_fu_457_a_address0, ap_block_pp0_stage0, ap_block_pp1_stage0, tmp_i_i_fu_500_p1, tmp_i5_i_fu_531_p1, tmp_fu_572_p1, ap_block_pp0_stage1, ap_block_pp1_stage1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            c1_address0 <= tmp_fu_572_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            c1_address0 <= ap_reg_pp1_iter2_c1_addr_2_reg_622;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            c1_address0 <= tmp_i5_i_fu_531_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            c1_address0 <= ap_reg_pp0_iter2_c1_addr_1_reg_598;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c1_address0 <= tmp_i_i_fu_500_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c1_address0 <= grp_inv_ntt2_fu_457_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_address0 <= grp_RLWE_enc2_fu_323_c1_address0;
        else 
            c1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c1_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2, grp_RLWE_enc2_fu_323_c1_ce0, grp_inv_ntt2_fu_457_a_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c1_ce0 <= grp_inv_ntt2_fu_457_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_ce0 <= grp_RLWE_enc2_fu_323_c1_ce0;
        else 
            c1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2, grp_RLWE_enc2_fu_323_c1_d0, grp_inv_ntt2_fu_457_a_d0, p_trunc_ext_fu_514_p1, ap_block_pp0_stage1, p_trunc4_ext_fu_555_p1, ap_block_pp1_stage1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            c1_d0 <= p_trunc4_ext_fu_555_p1;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            c1_d0 <= p_trunc_ext_fu_514_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c1_d0 <= grp_inv_ntt2_fu_457_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_d0 <= grp_RLWE_enc2_fu_323_c1_d0;
        else 
            c1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c1_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state2, ap_reg_pp0_iter2_exitcond_i_i_reg_589, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_reg_pp1_iter2_exitcond_i4_i_reg_613, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2, grp_RLWE_enc2_fu_323_c1_we0, grp_inv_ntt2_fu_457_a_we0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_reg_pp1_iter2_exitcond_i4_i_reg_613 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_reg_pp0_iter2_exitcond_i_i_reg_589 = ap_const_lv1_0)))) then 
            c1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c1_we0 <= grp_inv_ntt2_fu_457_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_we0 <= grp_RLWE_enc2_fu_323_c1_we0;
        else 
            c1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c2_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_RLWE_enc2_fu_323_c2_address0, ap_block_pp1_stage0, tmp_i5_i_fu_531_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            c2_address0 <= tmp_i5_i_fu_531_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c2_address0 <= grp_RLWE_enc2_fu_323_c2_address0;
        else 
            c2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c2_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, grp_RLWE_enc2_fu_323_c2_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            c2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c2_ce0 <= grp_RLWE_enc2_fu_323_c2_ce0;
        else 
            c2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c2_we0_assign_proc : process(ap_CS_fsm_state2, grp_RLWE_enc2_fu_323_c2_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c2_we0 <= grp_RLWE_enc2_fu_323_c2_we0;
        else 
            c2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_560_p2 <= "1" when (i_reg_312 = ap_const_lv9_100) else "0";
    exitcond_i4_i_fu_519_p2 <= "1" when (ap_phi_mux_j_i3_i_phi_fu_305_p4 = ap_const_lv9_100) else "0";
    exitcond_i_i_fu_488_p2 <= "1" when (ap_phi_mux_j_i_i_phi_fu_294_p4 = ap_const_lv9_100) else "0";
    grp_RLWE_enc2_fu_323_ap_start <= ap_reg_grp_RLWE_enc2_fu_323_ap_start;
    grp_inv_ntt2_fu_457_ap_start <= ap_reg_grp_inv_ntt2_fu_457_ap_start;

    grp_mod_r_fu_463_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_mod_r_fu_463_ap_ce <= ap_const_logic_1;
        else 
            grp_mod_r_fu_463_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_mod_r_fu_463_x_assign_proc : process(exitcond_i_i_reg_589, ap_CS_fsm_pp0_stage0, tmp_170_i_i_reg_608, exitcond_i4_i_reg_613, ap_CS_fsm_pp1_stage0, tmp_176_i_i_cast_fu_551_p1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i4_i_reg_613 = ap_const_lv1_0))) then 
            grp_mod_r_fu_463_x <= tmp_176_i_i_cast_fu_551_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_reg_589 = ap_const_lv1_0))) then 
            grp_mod_r_fu_463_x <= tmp_170_i_i_reg_608;
        else 
            grp_mod_r_fu_463_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_4_fu_566_p2 <= std_logic_vector(unsigned(i_reg_312) + unsigned(ap_const_lv9_1));
    j_9_fu_525_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_i3_i_phi_fu_305_p4) + unsigned(ap_const_lv9_1));
    j_fu_494_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_i_i_phi_fu_294_p4) + unsigned(ap_const_lv9_1));

    m_axi_AWVALID_assign_proc : process(ap_CS_fsm_state17, grp_inv_ntt2_fu_457_ap_done, ap_reg_ioackin_m_axi_AWREADY)
    begin
        if (((grp_inv_ntt2_fu_457_ap_done = ap_const_logic_1) and (ap_reg_ioackin_m_axi_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            m_axi_AWVALID <= ap_const_logic_1;
        else 
            m_axi_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_BREADY_assign_proc : process(ap_CS_fsm_state25, m_axi_BVALID)
    begin
        if (((m_axi_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            m_axi_BREADY <= ap_const_logic_1;
        else 
            m_axi_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_WVALID_assign_proc : process(ap_enable_reg_pp2_iter2, ap_reg_pp2_iter1_exitcond_reg_642, ap_reg_ioackin_m_axi_WREADY, ap_block_pp2_stage0_01001)
    begin
        if (((ap_reg_ioackin_m_axi_WREADY = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_reg_pp2_iter1_exitcond_reg_642 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_01001))) then 
            m_axi_WVALID <= ap_const_logic_1;
        else 
            m_axi_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_blk_n_AW_assign_proc : process(m_axi_m_axi_AWREADY, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            m_axi_blk_n_AW <= m_axi_m_axi_AWREADY;
        else 
            m_axi_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    m_axi_blk_n_B_assign_proc : process(m_axi_m_axi_BVALID, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            m_axi_blk_n_B <= m_axi_m_axi_BVALID;
        else 
            m_axi_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    m_axi_blk_n_W_assign_proc : process(m_axi_m_axi_WREADY, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, ap_reg_pp2_iter1_exitcond_reg_642)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_reg_pp2_iter1_exitcond_reg_642 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            m_axi_blk_n_W <= m_axi_m_axi_WREADY;
        else 
            m_axi_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

        p_trunc4_ext_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_463_ap_return),16));

        p_trunc_ext_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_463_ap_return),16));

    r2_address0 <= tmp_i_i_fu_500_p1(8 - 1 downto 0);

    r2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            r2_ce0 <= ap_const_logic_1;
        else 
            r2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_170_i_i_fu_577_p0 <= tmp_170_i_i_fu_577_p00(16 - 1 downto 0);
    tmp_170_i_i_fu_577_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c1_q0),32));
    tmp_170_i_i_fu_577_p1 <= tmp_170_i_i_fu_577_p10(16 - 1 downto 0);
    tmp_170_i_i_fu_577_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r2_q0),32));
    tmp_175_i_i_cast_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c2_q0),17));
    tmp_176_i_i_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_176_i_i_reg_632),32));
    tmp_176_i_i_fu_545_p2 <= std_logic_vector(unsigned(tmp_i8_i_cast_fu_537_p1) + unsigned(tmp_175_i_i_cast_fu_541_p1));
    tmp_46_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arr1_fu_468_p4),64));
    tmp_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_312),64));
    tmp_i5_i_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_i3_i_phi_fu_305_p4),64));
    tmp_i8_i_cast_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c1_q0),17));
    tmp_i_i_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_i_i_phi_fu_294_p4),64));
end behav;
