-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_ntt2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_we1 : OUT STD_LOGIC;
    a_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of fwd_ntt2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_429 : STD_LOGIC_VECTOR (14 downto 0) := "000010000101001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv30_13FE : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001001111111110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal primrt_omega_table_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal primrt_omega_table_ce0 : STD_LOGIC;
    signal primrt_omega_table_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal primrt_omega_table_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal primrt_omega_table_ce1 : STD_LOGIC;
    signal primrt_omega_table_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_1_reg_201 : STD_LOGIC_VECTOR (7 downto 0);
    signal omega_1_reg_212 : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_233 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state20_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state23_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state26_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_state29_pp1_stage1_iter3 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal exitcond_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_exitcond_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mod_r_fu_223_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_238 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state21_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state24_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_state27_pp1_stage2_iter2 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal exitcond1_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_3_fu_249_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_675 : STD_LOGIC_VECTOR (2 downto 0);
    signal primrt_cast_fu_265_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal primrt_cast_reg_690 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal primrt_omega_table_l_2_fu_269_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal m_2_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_2_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_145_fu_349_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_145_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_146_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal omega_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_reg_715 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_cast_fu_370_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal omega_cast_reg_721 : STD_LOGIC_VECTOR (28 downto 0);
    signal a_addr_13_reg_729 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_14_reg_734 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_15_reg_740 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_16_reg_746 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_2_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_118_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_load_12_reg_766 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_153_cast_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_155_cast_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_124_fu_498_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_124_reg_781 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_126_fu_504_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_126_reg_786 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_157_cast_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_159_cast_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_6_fu_654_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal omega_6_reg_801 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal j_8_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_8_reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_10_cast_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal omega_1_cast2_fu_548_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_1_cast2_reg_816 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter2_exitcond_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter3_exitcond_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_fu_558_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_7_reg_825 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_147_fu_568_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_reg_830 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_reg_835 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter1_a_addr_reg_835 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter2_a_addr_reg_835 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter3_a_addr_reg_835 : STD_LOGIC_VECTOR (7 downto 0);
    signal omega_8_cast_fu_585_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_addr_12_reg_851 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter2_a_addr_12_reg_851 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter3_a_addr_12_reg_851 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_132_cast_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_fu_623_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_103_reg_867 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_134_cast_fu_629_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_228_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_102_reg_877 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal grp_mod_r_fu_223_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_223_ap_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_mod_r_fu_228_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_228_ap_ce : STD_LOGIC;
    signal m_reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_158 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_0_in_reg_181 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_j_1_phi_fu_205_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_omega_1_phi_fu_216_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal tmp_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_107_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_109_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_114_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_116_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_97_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_100_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_trunc_ext_fu_518_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc4_ext_fu_523_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc5_ext_fu_528_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc6_ext_fu_533_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc7_ext_fu_633_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc8_ext_fu_637_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_op_op4_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_307_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_141_fu_293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_317_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_142_fu_323_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_140_fu_279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_143_fu_333_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_144_fu_341_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal omega_0_in_cast_fu_357_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_148_fu_374_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_106_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_115_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_5_trunc_ext_fu_457_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t2_trunc_ext_fu_468_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_5_cast_fu_461_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal u1_2_cast_fu_453_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_120_fu_476_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal t2_cast_fu_472_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal u2_cast_fu_465_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_122_fu_487_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_96_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal omega_5_fu_658_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal t1_4_trunc_ext_fu_600_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal u1_cast_fu_608_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal t1_4_cast_fu_604_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_101_fu_612_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_fu_642_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_111_fu_642_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_118_fu_648_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_118_fu_648_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_6_fu_654_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal omega_6_fu_654_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_5_fu_658_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal omega_5_fu_658_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_fu_665_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_fu_665_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal omega_5_fu_658_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal t1_fu_665_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_665_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_fu_642_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_118_fu_648_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component mod_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component encdec_mul_mul_167jG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encdec_mul_mul_138jQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component encdec_mul_mul_149j0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component fwd_ntt2_primrt_o6jw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    primrt_omega_table_U : component fwd_ntt2_primrt_o6jw
    generic map (
        DataWidth => 13,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => primrt_omega_table_address0,
        ce0 => primrt_omega_table_ce0,
        q0 => primrt_omega_table_q0,
        address1 => primrt_omega_table_address1,
        ce1 => primrt_omega_table_ce1,
        q1 => primrt_omega_table_q1);

    grp_mod_r_fu_223 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x => grp_mod_r_fu_223_x,
        ap_return => grp_mod_r_fu_223_ap_return,
        ap_ce => grp_mod_r_fu_223_ap_ce);

    grp_mod_r_fu_228 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x => grp_mod_r_fu_228_x,
        ap_return => grp_mod_r_fu_228_ap_return,
        ap_ce => grp_mod_r_fu_228_ap_ce);

    encdec_mul_mul_167jG_U66 : component encdec_mul_mul_167jG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_111_fu_642_p0,
        din1 => tmp_111_fu_642_p1,
        dout => tmp_111_fu_642_p2);

    encdec_mul_mul_167jG_U67 : component encdec_mul_mul_167jG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_118_fu_648_p0,
        din1 => tmp_118_fu_648_p1,
        dout => tmp_118_fu_648_p2);

    encdec_mul_mul_138jQ_U68 : component encdec_mul_mul_138jQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => omega_6_fu_654_p0,
        din1 => omega_6_fu_654_p1,
        dout => omega_6_fu_654_p2);

    encdec_mul_mul_149j0_U69 : component encdec_mul_mul_149j0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => omega_5_fu_658_p0,
        din1 => omega_5_fu_658_p1,
        dout => omega_5_fu_658_p2);

    encdec_mul_mul_167jG_U70 : component encdec_mul_mul_167jG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => t1_fu_665_p0,
        din1 => t1_fu_665_p1,
        dout => t1_fu_665_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_243_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)))) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_243_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_146_fu_361_p2 = ap_const_lv1_1))) then 
                i_reg_158 <= i_3_reg_675;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_158 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_1_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_243_p2 = ap_const_lv1_1))) then 
                j_1_reg_201 <= ap_const_lv8_0;
            elsif (((exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_1_reg_201 <= j_7_reg_825;
            end if; 
        end if;
    end process;

    j_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_reg_169 <= j_8_reg_806;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_169 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    k_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                k_reg_190 <= k_2_reg_751;
            elsif (((tmp_146_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_reg_190 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    m_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_146_fu_361_p2 = ap_const_lv1_1))) then 
                                m_reg_146(31 downto 1) <= m_2_reg_700(31 downto 1);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_reg_146(1) <= '1';
                m_reg_146(2) <= '0';
                m_reg_146(3) <= '0';
                m_reg_146(4) <= '0';
                m_reg_146(5) <= '0';
                m_reg_146(6) <= '0';
                m_reg_146(7) <= '0';
                m_reg_146(8) <= '0';
                m_reg_146(9) <= '0';
                m_reg_146(10) <= '0';
                m_reg_146(11) <= '0';
                m_reg_146(12) <= '0';
                m_reg_146(13) <= '0';
                m_reg_146(14) <= '0';
                m_reg_146(15) <= '0';
                m_reg_146(16) <= '0';
                m_reg_146(17) <= '0';
                m_reg_146(18) <= '0';
                m_reg_146(19) <= '0';
                m_reg_146(20) <= '0';
                m_reg_146(21) <= '0';
                m_reg_146(22) <= '0';
                m_reg_146(23) <= '0';
                m_reg_146(24) <= '0';
                m_reg_146(25) <= '0';
                m_reg_146(26) <= '0';
                m_reg_146(27) <= '0';
                m_reg_146(28) <= '0';
                m_reg_146(29) <= '0';
                m_reg_146(30) <= '0';
                m_reg_146(31) <= '0';
            end if; 
        end if;
    end process;

    omega_0_in_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                omega_0_in_reg_181 <= grp_mod_r_fu_223_ap_return;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                omega_0_in_reg_181 <= primrt_omega_table_l_2_fu_269_p1;
            end if; 
        end if;
    end process;

    omega_1_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_243_p2 = ap_const_lv1_1))) then 
                omega_1_reg_212 <= ap_const_lv15_429;
            elsif (((exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                omega_1_reg_212 <= grp_mod_r_fu_223_ap_return;
            end if; 
        end if;
    end process;

    reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp1_iter1_exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                reg_233 <= a_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_233 <= a_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    a_addr_12_reg_851(7 downto 1) <= tmp_100_fu_596_p1(8 - 1 downto 0)(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_fu_384_p2 = ap_const_lv1_1))) then
                a_addr_13_reg_729 <= tmp_107_fu_396_p1(8 - 1 downto 0);
                    a_addr_14_reg_734(7 downto 1) <= tmp_109_fu_407_p1(8 - 1 downto 0)(7 downto 1);
                a_addr_15_reg_740 <= tmp_114_fu_424_p1(8 - 1 downto 0);
                    a_addr_16_reg_746(7 downto 1) <= tmp_116_fu_435_p1(8 - 1 downto 0)(7 downto 1);
                k_2_reg_751 <= k_2_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_552_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    a_addr_reg_835(7 downto 1) <= tmp_97_fu_580_p1(8 - 1 downto 0)(7 downto 1);
                    tmp_147_reg_830(7 downto 1) <= tmp_147_fu_568_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                a_load_12_reg_766 <= a_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ap_reg_pp1_iter1_a_addr_reg_835(7 downto 1) <= a_addr_reg_835(7 downto 1);
                ap_reg_pp1_iter1_exitcond_reg_821 <= exitcond_reg_821;
                    ap_reg_pp1_iter2_a_addr_12_reg_851(7 downto 1) <= a_addr_12_reg_851(7 downto 1);
                    ap_reg_pp1_iter2_a_addr_reg_835(7 downto 1) <= ap_reg_pp1_iter1_a_addr_reg_835(7 downto 1);
                ap_reg_pp1_iter2_exitcond_reg_821 <= ap_reg_pp1_iter1_exitcond_reg_821;
                    ap_reg_pp1_iter3_a_addr_12_reg_851(7 downto 1) <= ap_reg_pp1_iter2_a_addr_12_reg_851(7 downto 1);
                    ap_reg_pp1_iter3_a_addr_reg_835(7 downto 1) <= ap_reg_pp1_iter2_a_addr_reg_835(7 downto 1);
                ap_reg_pp1_iter3_exitcond_reg_821 <= ap_reg_pp1_iter2_exitcond_reg_821;
                exitcond_reg_821 <= exitcond_fu_552_p2;
                omega_1_cast2_reg_816 <= omega_1_cast2_fu_548_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_675 <= i_3_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                j_7_reg_825 <= j_7_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                j_8_reg_806 <= j_8_fu_538_p2;
                omega_6_reg_801 <= omega_6_fu_654_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    m_2_reg_700(31 downto 2) <= m_2_fu_273_p2(31 downto 2);
                    primrt_cast_reg_690(12 downto 0) <= primrt_cast_fu_265_p1(12 downto 0);
                    tmp_145_reg_706(31 downto 1) <= tmp_145_fu_349_p3(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_146_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    omega_cast_reg_721(15 downto 0) <= omega_cast_fu_370_p1(15 downto 0);
                    omega_reg_715(15 downto 0) <= omega_fu_366_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_reg_pp1_iter1_exitcond_reg_821 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then
                reg_238 <= grp_mod_r_fu_223_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                t1_reg_846 <= t1_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp1_iter2_exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_102_reg_877 <= grp_mod_r_fu_228_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp1_iter1_exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_103_reg_867 <= tmp_103_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_124_reg_781 <= tmp_124_fu_498_p2;
                tmp_126_reg_786 <= tmp_126_fu_504_p2;
            end if;
        end if;
    end process;
    primrt_cast_reg_690(28 downto 13) <= "0000000000000000";
    m_2_reg_700(1 downto 0) <= "00";
    tmp_145_reg_706(0) <= '0';
    omega_reg_715(31 downto 16) <= "0000000000000000";
    omega_cast_reg_721(28 downto 16) <= "0000000000000";
    a_addr_14_reg_734(0) <= '1';
    a_addr_16_reg_746(0) <= '1';
    tmp_147_reg_830(0) <= '0';
    a_addr_reg_835(0) <= '1';
    ap_reg_pp1_iter1_a_addr_reg_835(0) <= '1';
    ap_reg_pp1_iter2_a_addr_reg_835(0) <= '1';
    ap_reg_pp1_iter3_a_addr_reg_835(0) <= '1';
    a_addr_12_reg_851(0) <= '0';
    ap_reg_pp1_iter2_a_addr_12_reg_851(0) <= '0';
    ap_reg_pp1_iter3_a_addr_12_reg_851(0) <= '0';
    m_reg_146(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, exitcond1_fu_243_p2, ap_CS_fsm_state2, tmp_146_fu_361_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_fu_384_p2, exitcond_fu_552_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_block_pp1_stage0_subdone, ap_block_pp1_stage2_subdone, ap_block_pp1_stage1_subdone, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_243_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_146_fu_361_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_fu_384_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_fu_552_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_fu_552_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp1_stage1, a_addr_13_reg_729, ap_CS_fsm_state5, a_addr_15_reg_740, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_reg_pp1_iter3_a_addr_12_reg_851, ap_enable_reg_pp1_iter3, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_block_pp1_stage0, ap_block_pp1_stage1, tmp_109_fu_407_p1, tmp_97_fu_580_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            a_address0 <= ap_reg_pp1_iter3_a_addr_12_reg_851;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            a_address0 <= tmp_97_fu_580_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_address0 <= a_addr_15_reg_740;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            a_address0 <= a_addr_13_reg_729;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= tmp_109_fu_407_p1(8 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_CS_fsm_state5, a_addr_14_reg_734, a_addr_15_reg_740, a_addr_16_reg_746, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_reg_pp1_iter3_a_addr_reg_835, ap_enable_reg_pp1_iter3, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_block_pp1_stage0, ap_block_pp1_stage1, tmp_116_fu_435_p1, tmp_100_fu_596_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            a_address1 <= ap_reg_pp1_iter3_a_addr_reg_835;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            a_address1 <= tmp_100_fu_596_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_address1 <= a_addr_16_reg_746;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            a_address1 <= a_addr_14_reg_734;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address1 <= a_addr_15_reg_740;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address1 <= tmp_116_fu_435_p1(8 - 1 downto 0);
        else 
            a_address1 <= "XXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1_11001, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a_d0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter3, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_block_pp1_stage1, p_trunc_ext_fu_518_p1, p_trunc5_ext_fu_528_p1, p_trunc7_ext_fu_633_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            a_d0 <= p_trunc7_ext_fu_633_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_d0 <= p_trunc5_ext_fu_528_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            a_d0 <= p_trunc_ext_fu_518_p1;
        else 
            a_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_d1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter3, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_block_pp1_stage1, p_trunc4_ext_fu_523_p1, p_trunc6_ext_fu_533_p1, p_trunc8_ext_fu_637_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            a_d1 <= p_trunc8_ext_fu_637_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_d1 <= p_trunc6_ext_fu_533_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            a_d1 <= p_trunc4_ext_fu_523_p1;
        else 
            a_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_reg_pp1_iter3_exitcond_reg_821, ap_enable_reg_pp1_iter3, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_reg_pp1_iter3_exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_reg_pp1_iter3_exitcond_reg_821, ap_enable_reg_pp1_iter3, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_reg_pp1_iter3_exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)))) then 
            a_we1 <= ap_const_logic_1;
        else 
            a_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(19);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(20);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(21);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state19_assign_proc : process(exitcond_fu_552_p2)
    begin
        if ((exitcond_fu_552_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_205_p4_assign_proc : process(j_1_reg_201, ap_enable_reg_pp1_iter1, exitcond_reg_821, ap_CS_fsm_pp1_stage0, j_7_reg_825, ap_block_pp1_stage0)
    begin
        if (((exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_j_1_phi_fu_205_p4 <= j_7_reg_825;
        else 
            ap_phi_mux_j_1_phi_fu_205_p4 <= j_1_reg_201;
        end if; 
    end process;


    ap_phi_mux_omega_1_phi_fu_216_p4_assign_proc : process(omega_1_reg_212, ap_enable_reg_pp1_iter1, exitcond_reg_821, grp_mod_r_fu_223_ap_return, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0)
    begin
        if (((exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_omega_1_phi_fu_216_p4 <= grp_mod_r_fu_223_ap_return;
        else 
            ap_phi_mux_omega_1_phi_fu_216_p4 <= omega_1_reg_212;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_243_p2 <= "1" when (i_reg_158 = ap_const_lv3_7) else "0";
    exitcond_fu_552_p2 <= "1" when (ap_phi_mux_j_1_phi_fu_205_p4 = ap_const_lv8_80) else "0";

    grp_mod_r_fu_223_ap_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_1 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_1 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_1 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)))) then 
            grp_mod_r_fu_223_ap_ce <= ap_const_logic_0;
        else 
            grp_mod_r_fu_223_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_mod_r_fu_223_x_assign_proc : process(ap_CS_fsm_pp1_stage1, exitcond_reg_821, ap_CS_fsm_pp1_stage2, tmp_111_fu_642_p2, ap_CS_fsm_state6, tmp_153_cast_fu_482_p1, ap_CS_fsm_state9, tmp_157_cast_fu_510_p1, ap_CS_fsm_state10, omega_10_cast_fu_544_p1, ap_CS_fsm_state15, ap_CS_fsm_pp1_stage0, exitcond_fu_552_p2, ap_reg_pp1_iter2_exitcond_reg_821, ap_enable_reg_pp1_iter0, omega_8_cast_fu_585_p1, t1_reg_846, tmp_134_cast_fu_629_p1, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_block_pp1_stage2, ap_block_pp1_stage1)
    begin
        if (((ap_reg_pp1_iter2_exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            grp_mod_r_fu_223_x <= tmp_134_cast_fu_629_p1;
        elsif (((exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            grp_mod_r_fu_223_x <= t1_reg_846;
        elsif (((exitcond_fu_552_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_mod_r_fu_223_x <= omega_8_cast_fu_585_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_mod_r_fu_223_x <= omega_10_cast_fu_544_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_mod_r_fu_223_x <= tmp_157_cast_fu_510_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_mod_r_fu_223_x <= tmp_153_cast_fu_482_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_mod_r_fu_223_x <= tmp_111_fu_642_p2;
        else 
            grp_mod_r_fu_223_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_mod_r_fu_228_ap_ce_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            grp_mod_r_fu_228_ap_ce <= ap_const_logic_1;
        else 
            grp_mod_r_fu_228_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_mod_r_fu_228_x_assign_proc : process(ap_reg_pp1_iter1_exitcond_reg_821, ap_CS_fsm_state6, tmp_118_fu_648_p2, ap_CS_fsm_state9, tmp_155_cast_fu_493_p1, ap_CS_fsm_state10, tmp_159_cast_fu_514_p1, ap_CS_fsm_pp1_stage0, tmp_132_cast_fu_618_p1, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_reg_pp1_iter1_exitcond_reg_821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_mod_r_fu_228_x <= tmp_132_cast_fu_618_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_mod_r_fu_228_x <= tmp_159_cast_fu_514_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_mod_r_fu_228_x <= tmp_155_cast_fu_493_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_mod_r_fu_228_x <= tmp_118_fu_648_p2;
        else 
            grp_mod_r_fu_228_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_3_fu_249_p2 <= std_logic_vector(unsigned(i_reg_158) + unsigned(ap_const_lv3_1));
    icmp_fu_384_p2 <= "1" when (signed(tmp_148_fu_374_p4) < signed(ap_const_lv24_1)) else "0";
    j_7_fu_558_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_1_phi_fu_205_p4) + unsigned(ap_const_lv8_1));
    j_8_fu_538_p2 <= std_logic_vector(unsigned(j_reg_169) + unsigned(ap_const_lv32_2));
    k_2_fu_440_p2 <= std_logic_vector(unsigned(m_2_reg_700) + unsigned(k_reg_190));
    m_2_fu_273_p2 <= std_logic_vector(shift_left(unsigned(m_reg_146),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    m_op_op4_fu_287_p2 <= (m_reg_146 or ap_const_lv32_1);
        omega_0_in_cast_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(omega_0_in_reg_181),16));

    omega_10_cast_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_6_reg_801),32));
        omega_1_cast2_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_omega_1_phi_fu_216_p4),16));

    omega_5_fu_658_p0 <= ap_const_lv30_13FE(14 - 1 downto 0);
    omega_5_fu_658_p1 <= omega_5_fu_658_p10(16 - 1 downto 0);
    omega_5_fu_658_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_1_cast2_fu_548_p1),30));
    omega_6_fu_654_p0 <= primrt_cast_reg_690(13 - 1 downto 0);
    omega_6_fu_654_p1 <= omega_cast_reg_721(16 - 1 downto 0);
    omega_8_cast_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_5_fu_658_p2),32));
    omega_cast_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_0_in_cast_fu_357_p1),29));
    omega_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_0_in_cast_fu_357_p1),32));
    p_lshr_fu_307_p4 <= p_neg_fu_301_p2(31 downto 1);
    p_neg_fu_301_p2 <= (m_reg_146 xor ap_const_lv32_FFFFFFFF);
    p_neg_t_fu_317_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_lshr_fu_307_p4));
        p_trunc4_ext_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_228_ap_return),16));

        p_trunc5_ext_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_223_ap_return),16));

        p_trunc6_ext_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_228_ap_return),16));

        p_trunc7_ext_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_102_reg_877),16));

        p_trunc8_ext_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_223_ap_return),16));

        p_trunc_ext_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_223_ap_return),16));

    primrt_cast_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(primrt_omega_table_q0),29));
    primrt_omega_table_address0 <= tmp_fu_255_p1(3 - 1 downto 0);
    primrt_omega_table_address1 <= tmp_s_fu_260_p1(3 - 1 downto 0);

    primrt_omega_table_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            primrt_omega_table_ce0 <= ap_const_logic_1;
        else 
            primrt_omega_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    primrt_omega_table_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            primrt_omega_table_ce1 <= ap_const_logic_1;
        else 
            primrt_omega_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    primrt_omega_table_l_2_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(primrt_omega_table_q1),15));
    t1_4_cast_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_4_trunc_ext_fu_600_p1),17));
        t1_4_trunc_ext_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_238),16));

    t1_5_cast_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_5_trunc_ext_fu_457_p1),17));
        t1_5_trunc_ext_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_223_ap_return),16));

    t1_fu_665_p0 <= t1_fu_665_p00(16 - 1 downto 0);
    t1_fu_665_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),32));
    t1_fu_665_p1 <= t1_fu_665_p10(16 - 1 downto 0);
    t1_fu_665_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_1_cast2_reg_816),32));
    t2_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t2_trunc_ext_fu_468_p1),17));
        t2_trunc_ext_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_228_ap_return),16));

    tmp1_fu_412_p2 <= std_logic_vector(unsigned(m_reg_146) + unsigned(k_reg_190));
    tmp_100_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_147_reg_830),64));
    tmp_101_fu_612_p2 <= std_logic_vector(unsigned(u1_cast_fu_608_p1) + unsigned(t1_4_cast_fu_604_p1));
    tmp_103_fu_623_p2 <= std_logic_vector(unsigned(u1_cast_fu_608_p1) - unsigned(t1_4_cast_fu_604_p1));
    tmp_106_fu_390_p2 <= std_logic_vector(unsigned(k_reg_190) + unsigned(j_reg_169));
        tmp_107_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_106_fu_390_p2),64));

    tmp_108_fu_401_p2 <= (tmp_106_fu_390_p2 or ap_const_lv32_1);
        tmp_109_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_108_fu_401_p2),64));

    tmp_111_fu_642_p0 <= tmp_111_fu_642_p00(16 - 1 downto 0);
    tmp_111_fu_642_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),32));
    tmp_111_fu_642_p1 <= omega_reg_715(16 - 1 downto 0);
    tmp_113_fu_418_p2 <= std_logic_vector(unsigned(tmp1_fu_412_p2) + unsigned(j_reg_169));
        tmp_114_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_113_fu_418_p2),64));

    tmp_115_fu_429_p2 <= (tmp_113_fu_418_p2 or ap_const_lv32_1);
        tmp_116_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_115_fu_429_p2),64));

    tmp_118_fu_648_p0 <= tmp_118_fu_648_p00(16 - 1 downto 0);
    tmp_118_fu_648_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q1),32));
    tmp_118_fu_648_p1 <= omega_reg_715(16 - 1 downto 0);
    tmp_120_fu_476_p2 <= std_logic_vector(unsigned(t1_5_cast_fu_461_p1) + unsigned(u1_2_cast_fu_453_p1));
    tmp_122_fu_487_p2 <= std_logic_vector(unsigned(t2_cast_fu_472_p1) + unsigned(u2_cast_fu_465_p1));
    tmp_124_fu_498_p2 <= std_logic_vector(unsigned(u1_2_cast_fu_453_p1) - unsigned(t1_5_cast_fu_461_p1));
    tmp_126_fu_504_p2 <= std_logic_vector(unsigned(u2_cast_fu_465_p1) - unsigned(t2_cast_fu_472_p1));
    tmp_132_cast_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_612_p2),32));
        tmp_134_cast_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_103_reg_867),32));

    tmp_140_fu_279_p3 <= m_reg_146(31 downto 31);
    tmp_141_fu_293_p3 <= m_op_op4_fu_287_p2(31 downto 31);
    tmp_142_fu_323_p4 <= m_op_op4_fu_287_p2(31 downto 1);
    tmp_143_fu_333_p3 <= 
        p_neg_t_fu_317_p2 when (tmp_141_fu_293_p3(0) = '1') else 
        tmp_142_fu_323_p4;
    tmp_144_fu_341_p3 <= 
        ap_const_lv31_0 when (tmp_140_fu_279_p3(0) = '1') else 
        tmp_143_fu_333_p3;
    tmp_145_fu_349_p3 <= (tmp_144_fu_341_p3 & ap_const_lv1_0);
    tmp_146_fu_361_p2 <= "1" when (j_reg_169 = tmp_145_reg_706) else "0";
    tmp_147_fu_568_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_j_1_phi_fu_205_p4),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_148_fu_374_p4 <= k_reg_190(31 downto 8);
    tmp_153_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_120_fu_476_p2),32));
    tmp_155_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_122_fu_487_p2),32));
        tmp_157_cast_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_124_reg_781),32));

        tmp_159_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_126_reg_786),32));

    tmp_96_fu_574_p2 <= (tmp_147_fu_568_p2 or ap_const_lv8_1);
    tmp_97_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_fu_574_p2),64));
    tmp_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_158),64));
    tmp_s_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_fu_249_p2),64));
    u1_2_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_233),17));
    u1_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_233),17));
    u2_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_load_12_reg_766),17));
end behav;
