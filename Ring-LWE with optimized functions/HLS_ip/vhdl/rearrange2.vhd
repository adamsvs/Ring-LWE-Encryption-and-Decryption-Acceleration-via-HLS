-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rearrange2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of rearrange2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_88 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_reg_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_177 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_93_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal swp_index_fu_99_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal swp_index_reg_172 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_119_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_181 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_reg_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal u1_reg_191 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal a_addr_1_reg_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal u2_reg_201 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_7_fu_140_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_2_reg_211 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_3_reg_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_fu_162_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_reg_76 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal swp_index_cast_fu_109_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_130_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_152_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_reg_76 <= i_1_fu_162_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_76 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_reg_177 = ap_const_lv1_1) and (exitcond_reg_168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    a_addr_1_reg_196(7 downto 1) <= tmp_5_fu_135_p1(8 - 1 downto 0)(7 downto 1);
                u1_reg_191 <= a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_reg_177 = ap_const_lv1_1) and (exitcond_reg_168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    a_addr_2_reg_211(7 downto 1) <= tmp_8_fu_147_p1(8 - 1 downto 0)(7 downto 1);
                    tmp_7_reg_206(7 downto 1) <= tmp_7_fu_140_p3(7 downto 1);
                u2_reg_201 <= a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_reg_177 = ap_const_lv1_1) and (exitcond_reg_168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    a_addr_3_reg_216(7 downto 1) <= tmp_1_fu_157_p1(8 - 1 downto 0)(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_113_p2 = ap_const_lv1_1) and (exitcond_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    a_addr_reg_186(7 downto 1) <= tmp_3_fu_125_p1(8 - 1 downto 0)(7 downto 1);
                    tmp_reg_181(7 downto 1) <= tmp_fu_119_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                exitcond_reg_168 <= exitcond_fu_93_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_s_reg_177 = ap_const_lv1_1) and (exitcond_reg_168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((tmp_s_reg_177 = ap_const_lv1_1) and (exitcond_reg_168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then
                reg_88 <= a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                swp_index_reg_172 <= swp_index_fu_99_p4;
                tmp_s_reg_177 <= tmp_s_fu_113_p2;
            end if;
        end if;
    end process;
    tmp_reg_181(0) <= '0';
    a_addr_reg_186(0) <= '0';
    a_addr_1_reg_196(0) <= '1';
    tmp_7_reg_206(0) <= '0';
    a_addr_2_reg_211(0) <= '0';
    a_addr_3_reg_216(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_fu_93_p2, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2, a_addr_reg_186, ap_CS_fsm_state3, a_addr_1_reg_196, ap_CS_fsm_state4, a_addr_2_reg_211, a_addr_3_reg_216, ap_CS_fsm_state9, tmp_3_fu_125_p1, tmp_5_fu_135_p1, tmp_8_fu_147_p1, tmp_1_fu_157_p1, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            a_address0 <= a_addr_3_reg_216;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_address0 <= a_addr_2_reg_211;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_address0 <= a_addr_1_reg_196;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address0 <= a_addr_reg_186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= tmp_1_fu_157_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address0 <= tmp_8_fu_147_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= tmp_5_fu_135_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address0 <= tmp_3_fu_125_p1(8 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_d0_assign_proc : process(reg_88, ap_CS_fsm_state6, u1_reg_191, u2_reg_201, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            a_d0 <= u2_reg_201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_d0 <= u1_reg_191;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            a_d0 <= reg_88;
        else 
            a_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_we0_assign_proc : process(exitcond_reg_168, tmp_s_reg_177, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((((tmp_s_reg_177 = ap_const_lv1_1) and (exitcond_reg_168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((tmp_s_reg_177 = ap_const_lv1_1) and (exitcond_reg_168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((tmp_s_reg_177 = ap_const_lv1_1) and (exitcond_reg_168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((tmp_s_reg_177 = ap_const_lv1_1) and (exitcond_reg_168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_93_p2 <= "1" when (i_reg_76 = ap_const_lv8_80) else "0";
    i_1_fu_162_p2 <= std_logic_vector(unsigned(i_reg_76) + unsigned(ap_const_lv8_1));
    swp_index_cast_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(swp_index_fu_99_p4),8));
    
    swp_index_fu_99_p4_proc : process(i_reg_76)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable swp_index_fu_99_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_6(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := i_reg_76;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_6(3-1 downto 0)));
            for swp_index_fu_99_p4_i in 0 to 8-1 loop
                v0_cpy(swp_index_fu_99_p4_i) := i_reg_76(8-1-swp_index_fu_99_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        swp_index_fu_99_p4 <= resvalue(7-1 downto 0);
    end process;

    tmp_1_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_152_p2),64));
    tmp_3_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_119_p2),64));
    tmp_4_fu_130_p2 <= (tmp_reg_181 or ap_const_lv8_1);
    tmp_5_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_130_p2),64));
    tmp_7_fu_140_p3 <= (swp_index_reg_172 & ap_const_lv1_0);
    tmp_8_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_140_p3),64));
    tmp_9_fu_152_p2 <= (tmp_7_reg_206 or ap_const_lv8_1);
    tmp_fu_119_p2 <= std_logic_vector(shift_left(unsigned(i_reg_76),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_s_fu_113_p2 <= "1" when (unsigned(swp_index_cast_fu_109_p1) > unsigned(i_reg_76)) else "0";
end behav;
