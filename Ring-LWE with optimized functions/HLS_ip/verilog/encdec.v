// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="encdec,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=17.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=22.431750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=191,HLS_SYN_FF=10760,HLS_SYN_LUT=16135}" *)

module encdec (
        ap_clk,
        ap_rst_n,
        m_axi_m_axi_AWVALID,
        m_axi_m_axi_AWREADY,
        m_axi_m_axi_AWADDR,
        m_axi_m_axi_AWID,
        m_axi_m_axi_AWLEN,
        m_axi_m_axi_AWSIZE,
        m_axi_m_axi_AWBURST,
        m_axi_m_axi_AWLOCK,
        m_axi_m_axi_AWCACHE,
        m_axi_m_axi_AWPROT,
        m_axi_m_axi_AWQOS,
        m_axi_m_axi_AWREGION,
        m_axi_m_axi_AWUSER,
        m_axi_m_axi_WVALID,
        m_axi_m_axi_WREADY,
        m_axi_m_axi_WDATA,
        m_axi_m_axi_WSTRB,
        m_axi_m_axi_WLAST,
        m_axi_m_axi_WID,
        m_axi_m_axi_WUSER,
        m_axi_m_axi_ARVALID,
        m_axi_m_axi_ARREADY,
        m_axi_m_axi_ARADDR,
        m_axi_m_axi_ARID,
        m_axi_m_axi_ARLEN,
        m_axi_m_axi_ARSIZE,
        m_axi_m_axi_ARBURST,
        m_axi_m_axi_ARLOCK,
        m_axi_m_axi_ARCACHE,
        m_axi_m_axi_ARPROT,
        m_axi_m_axi_ARQOS,
        m_axi_m_axi_ARREGION,
        m_axi_m_axi_ARUSER,
        m_axi_m_axi_RVALID,
        m_axi_m_axi_RREADY,
        m_axi_m_axi_RDATA,
        m_axi_m_axi_RLAST,
        m_axi_m_axi_RID,
        m_axi_m_axi_RUSER,
        m_axi_m_axi_RRESP,
        m_axi_m_axi_BVALID,
        m_axi_m_axi_BREADY,
        m_axi_m_axi_BRESP,
        m_axi_m_axi_BID,
        m_axi_m_axi_BUSER,
        s_axi_S_AXI_BUNDLE_AWVALID,
        s_axi_S_AXI_BUNDLE_AWREADY,
        s_axi_S_AXI_BUNDLE_AWADDR,
        s_axi_S_AXI_BUNDLE_WVALID,
        s_axi_S_AXI_BUNDLE_WREADY,
        s_axi_S_AXI_BUNDLE_WDATA,
        s_axi_S_AXI_BUNDLE_WSTRB,
        s_axi_S_AXI_BUNDLE_ARVALID,
        s_axi_S_AXI_BUNDLE_ARREADY,
        s_axi_S_AXI_BUNDLE_ARADDR,
        s_axi_S_AXI_BUNDLE_RVALID,
        s_axi_S_AXI_BUNDLE_RREADY,
        s_axi_S_AXI_BUNDLE_RDATA,
        s_axi_S_AXI_BUNDLE_RRESP,
        s_axi_S_AXI_BUNDLE_BVALID,
        s_axi_S_AXI_BUNDLE_BREADY,
        s_axi_S_AXI_BUNDLE_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_pp0_stage0 = 15'd4;
parameter    ap_ST_fsm_pp0_stage1 = 15'd8;
parameter    ap_ST_fsm_state9 = 15'd16;
parameter    ap_ST_fsm_pp1_stage0 = 15'd32;
parameter    ap_ST_fsm_pp1_stage1 = 15'd64;
parameter    ap_ST_fsm_state16 = 15'd128;
parameter    ap_ST_fsm_state17 = 15'd256;
parameter    ap_ST_fsm_pp2_stage0 = 15'd512;
parameter    ap_ST_fsm_state21 = 15'd1024;
parameter    ap_ST_fsm_state22 = 15'd2048;
parameter    ap_ST_fsm_state23 = 15'd4096;
parameter    ap_ST_fsm_state24 = 15'd8192;
parameter    ap_ST_fsm_state25 = 15'd16384;
parameter    C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH = 32;
parameter    C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH = 12;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_M_AXI_ID_WIDTH = 1;
parameter    C_M_AXI_M_AXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_M_AXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_AXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_AXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_AXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_AXI_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_AXI_USER_VALUE = 0;
parameter    C_M_AXI_M_AXI_PROT_VALUE = 0;
parameter    C_M_AXI_M_AXI_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_S_AXI_BUNDLE_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_m_axi_AWVALID;
input   m_axi_m_axi_AWREADY;
output  [C_M_AXI_M_AXI_ADDR_WIDTH - 1:0] m_axi_m_axi_AWADDR;
output  [C_M_AXI_M_AXI_ID_WIDTH - 1:0] m_axi_m_axi_AWID;
output  [7:0] m_axi_m_axi_AWLEN;
output  [2:0] m_axi_m_axi_AWSIZE;
output  [1:0] m_axi_m_axi_AWBURST;
output  [1:0] m_axi_m_axi_AWLOCK;
output  [3:0] m_axi_m_axi_AWCACHE;
output  [2:0] m_axi_m_axi_AWPROT;
output  [3:0] m_axi_m_axi_AWQOS;
output  [3:0] m_axi_m_axi_AWREGION;
output  [C_M_AXI_M_AXI_AWUSER_WIDTH - 1:0] m_axi_m_axi_AWUSER;
output   m_axi_m_axi_WVALID;
input   m_axi_m_axi_WREADY;
output  [C_M_AXI_M_AXI_DATA_WIDTH - 1:0] m_axi_m_axi_WDATA;
output  [C_M_AXI_M_AXI_WSTRB_WIDTH - 1:0] m_axi_m_axi_WSTRB;
output   m_axi_m_axi_WLAST;
output  [C_M_AXI_M_AXI_ID_WIDTH - 1:0] m_axi_m_axi_WID;
output  [C_M_AXI_M_AXI_WUSER_WIDTH - 1:0] m_axi_m_axi_WUSER;
output   m_axi_m_axi_ARVALID;
input   m_axi_m_axi_ARREADY;
output  [C_M_AXI_M_AXI_ADDR_WIDTH - 1:0] m_axi_m_axi_ARADDR;
output  [C_M_AXI_M_AXI_ID_WIDTH - 1:0] m_axi_m_axi_ARID;
output  [7:0] m_axi_m_axi_ARLEN;
output  [2:0] m_axi_m_axi_ARSIZE;
output  [1:0] m_axi_m_axi_ARBURST;
output  [1:0] m_axi_m_axi_ARLOCK;
output  [3:0] m_axi_m_axi_ARCACHE;
output  [2:0] m_axi_m_axi_ARPROT;
output  [3:0] m_axi_m_axi_ARQOS;
output  [3:0] m_axi_m_axi_ARREGION;
output  [C_M_AXI_M_AXI_ARUSER_WIDTH - 1:0] m_axi_m_axi_ARUSER;
input   m_axi_m_axi_RVALID;
output   m_axi_m_axi_RREADY;
input  [C_M_AXI_M_AXI_DATA_WIDTH - 1:0] m_axi_m_axi_RDATA;
input   m_axi_m_axi_RLAST;
input  [C_M_AXI_M_AXI_ID_WIDTH - 1:0] m_axi_m_axi_RID;
input  [C_M_AXI_M_AXI_RUSER_WIDTH - 1:0] m_axi_m_axi_RUSER;
input  [1:0] m_axi_m_axi_RRESP;
input   m_axi_m_axi_BVALID;
output   m_axi_m_axi_BREADY;
input  [1:0] m_axi_m_axi_BRESP;
input  [C_M_AXI_M_AXI_ID_WIDTH - 1:0] m_axi_m_axi_BID;
input  [C_M_AXI_M_AXI_BUSER_WIDTH - 1:0] m_axi_m_axi_BUSER;
input   s_axi_S_AXI_BUNDLE_AWVALID;
output   s_axi_S_AXI_BUNDLE_AWREADY;
input  [C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH - 1:0] s_axi_S_AXI_BUNDLE_AWADDR;
input   s_axi_S_AXI_BUNDLE_WVALID;
output   s_axi_S_AXI_BUNDLE_WREADY;
input  [C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH - 1:0] s_axi_S_AXI_BUNDLE_WDATA;
input  [C_S_AXI_S_AXI_BUNDLE_WSTRB_WIDTH - 1:0] s_axi_S_AXI_BUNDLE_WSTRB;
input   s_axi_S_AXI_BUNDLE_ARVALID;
output   s_axi_S_AXI_BUNDLE_ARREADY;
input  [C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH - 1:0] s_axi_S_AXI_BUNDLE_ARADDR;
output   s_axi_S_AXI_BUNDLE_RVALID;
input   s_axi_S_AXI_BUNDLE_RREADY;
output  [C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH - 1:0] s_axi_S_AXI_BUNDLE_RDATA;
output  [1:0] s_axi_S_AXI_BUNDLE_RRESP;
output   s_axi_S_AXI_BUNDLE_BVALID;
input   s_axi_S_AXI_BUNDLE_BREADY;
output  [1:0] s_axi_S_AXI_BUNDLE_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] a_q0;
reg   [7:0] c1_address0;
reg    c1_ce0;
reg    c1_we0;
reg   [15:0] c1_d0;
wire   [15:0] c1_q0;
reg   [7:0] c2_address0;
reg    c2_ce0;
reg    c2_we0;
wire   [15:0] c2_q0;
wire   [15:0] m_q0;
wire   [15:0] p_q0;
wire   [7:0] r2_address0;
reg    r2_ce0;
wire   [15:0] r2_q0;
wire   [31:0] arr;
reg    m_axi_blk_n_AW;
wire    ap_CS_fsm_state17;
reg    m_axi_blk_n_W;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond_reg_642;
reg   [0:0] ap_reg_pp2_iter1_exitcond_reg_642;
reg    m_axi_blk_n_B;
wire    ap_CS_fsm_state25;
reg    m_axi_AWVALID;
wire    m_axi_AWREADY;
reg    m_axi_WVALID;
wire    m_axi_WREADY;
wire    m_axi_ARREADY;
wire    m_axi_RVALID;
wire   [15:0] m_axi_RDATA;
wire    m_axi_RLAST;
wire   [0:0] m_axi_RID;
wire   [0:0] m_axi_RUSER;
wire   [1:0] m_axi_RRESP;
wire    m_axi_BVALID;
reg    m_axi_BREADY;
wire   [1:0] m_axi_BRESP;
wire   [0:0] m_axi_BID;
wire   [0:0] m_axi_BUSER;
reg   [8:0] j_i_i_reg_290;
reg   [8:0] j_i3_i_reg_301;
reg   [8:0] i_reg_312;
reg   [31:0] m_axi_addr_reg_583;
wire    ap_CS_fsm_state2;
wire    grp_RLWE_enc2_fu_323_ap_done;
wire   [0:0] exitcond_i_i_fu_488_p2;
reg   [0:0] exitcond_i_i_reg_589;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_i_reg_589;
reg   [0:0] ap_reg_pp0_iter2_exitcond_i_i_reg_589;
wire   [8:0] j_fu_494_p2;
reg   [8:0] j_reg_593;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] c1_addr_1_reg_598;
reg   [7:0] ap_reg_pp0_iter1_c1_addr_1_reg_598;
reg   [7:0] ap_reg_pp0_iter2_c1_addr_1_reg_598;
wire   [31:0] tmp_170_i_i_fu_577_p2;
reg   [31:0] tmp_170_i_i_reg_608;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] exitcond_i4_i_fu_519_p2;
reg   [0:0] exitcond_i4_i_reg_613;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state10_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
wire    ap_block_state14_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] ap_reg_pp1_iter1_exitcond_i4_i_reg_613;
reg   [0:0] ap_reg_pp1_iter2_exitcond_i4_i_reg_613;
wire   [8:0] j_9_fu_525_p2;
reg   [8:0] j_9_reg_617;
reg    ap_enable_reg_pp1_iter0;
reg   [7:0] c1_addr_2_reg_622;
reg   [7:0] ap_reg_pp1_iter1_c1_addr_2_reg_622;
reg   [7:0] ap_reg_pp1_iter2_c1_addr_2_reg_622;
wire   [16:0] tmp_176_i_i_fu_545_p2;
reg   [16:0] tmp_176_i_i_reg_632;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state11_pp1_stage1_iter0;
wire    ap_block_state13_pp1_stage1_iter1;
wire    ap_block_state15_pp1_stage1_iter2;
wire    ap_block_pp1_stage1_11001;
wire   [31:0] tmp_176_i_i_cast_fu_551_p1;
wire   [0:0] exitcond_fu_560_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state18_pp2_stage0_iter0;
wire    ap_block_state19_pp2_stage0_iter1;
wire    ap_block_state20_pp2_stage0_iter2;
reg    ap_sig_ioackin_m_axi_WREADY;
reg    ap_block_state20_io;
reg    ap_block_pp2_stage0_11001;
wire   [8:0] i_4_fu_566_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [15:0] c1_load_reg_656;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state9;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state10;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage1_subdone;
reg    ap_enable_reg_pp1_iter2;
reg    ap_sig_ioackin_m_axi_AWREADY;
wire    grp_inv_ntt2_fu_457_ap_done;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state18;
wire    grp_RLWE_enc2_fu_323_ap_start;
wire    grp_RLWE_enc2_fu_323_ap_idle;
wire    grp_RLWE_enc2_fu_323_ap_ready;
wire   [7:0] grp_RLWE_enc2_fu_323_a_address0;
wire    grp_RLWE_enc2_fu_323_a_ce0;
wire   [7:0] grp_RLWE_enc2_fu_323_c1_address0;
wire    grp_RLWE_enc2_fu_323_c1_ce0;
wire    grp_RLWE_enc2_fu_323_c1_we0;
wire   [15:0] grp_RLWE_enc2_fu_323_c1_d0;
wire   [7:0] grp_RLWE_enc2_fu_323_c2_address0;
wire    grp_RLWE_enc2_fu_323_c2_ce0;
wire    grp_RLWE_enc2_fu_323_c2_we0;
wire   [15:0] grp_RLWE_enc2_fu_323_c2_d0;
wire   [7:0] grp_RLWE_enc2_fu_323_m_address0;
wire    grp_RLWE_enc2_fu_323_m_ce0;
wire   [7:0] grp_RLWE_enc2_fu_323_p_address0;
wire    grp_RLWE_enc2_fu_323_p_ce0;
wire    grp_inv_ntt2_fu_457_ap_start;
wire    grp_inv_ntt2_fu_457_ap_idle;
wire    grp_inv_ntt2_fu_457_ap_ready;
wire   [7:0] grp_inv_ntt2_fu_457_a_address0;
wire    grp_inv_ntt2_fu_457_a_ce0;
wire    grp_inv_ntt2_fu_457_a_we0;
wire   [15:0] grp_inv_ntt2_fu_457_a_d0;
reg   [31:0] grp_mod_r_fu_463_x;
wire   [14:0] grp_mod_r_fu_463_ap_return;
reg    grp_mod_r_fu_463_ap_ce;
reg   [8:0] ap_phi_mux_j_i_i_phi_fu_294_p4;
wire    ap_block_pp0_stage0;
reg   [8:0] ap_phi_mux_j_i3_i_phi_fu_305_p4;
wire    ap_block_pp1_stage0;
reg    ap_reg_grp_RLWE_enc2_fu_323_ap_start;
reg    ap_reg_grp_inv_ntt2_fu_457_ap_start;
wire    ap_CS_fsm_state16;
wire   [63:0] tmp_i_i_fu_500_p1;
wire   [63:0] tmp_i5_i_fu_531_p1;
wire   [63:0] tmp_fu_572_p1;
wire   [63:0] tmp_46_fu_478_p1;
reg    ap_reg_ioackin_m_axi_AWREADY;
reg    ap_reg_ioackin_m_axi_WREADY;
wire    ap_block_pp2_stage0_01001;
wire  signed [15:0] p_trunc_ext_fu_514_p1;
wire    ap_block_pp0_stage1;
wire  signed [15:0] p_trunc4_ext_fu_555_p1;
wire    ap_block_pp1_stage1;
wire   [30:0] arr1_fu_468_p4;
wire   [16:0] tmp_i8_i_cast_fu_537_p1;
wire   [16:0] tmp_175_i_i_cast_fu_541_p1;
wire   [15:0] tmp_170_i_i_fu_577_p0;
wire   [15:0] tmp_170_i_i_fu_577_p1;
reg   [14:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [31:0] tmp_170_i_i_fu_577_p00;
wire   [31:0] tmp_170_i_i_fu_577_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_reg_grp_RLWE_enc2_fu_323_ap_start = 1'b0;
#0 ap_reg_grp_inv_ntt2_fu_457_ap_start = 1'b0;
#0 ap_reg_ioackin_m_axi_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_WREADY = 1'b0;
end

encdec_S_AXI_BUNDLE_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH ))
encdec_S_AXI_BUNDLE_s_axi_U(
    .AWVALID(s_axi_S_AXI_BUNDLE_AWVALID),
    .AWREADY(s_axi_S_AXI_BUNDLE_AWREADY),
    .AWADDR(s_axi_S_AXI_BUNDLE_AWADDR),
    .WVALID(s_axi_S_AXI_BUNDLE_WVALID),
    .WREADY(s_axi_S_AXI_BUNDLE_WREADY),
    .WDATA(s_axi_S_AXI_BUNDLE_WDATA),
    .WSTRB(s_axi_S_AXI_BUNDLE_WSTRB),
    .ARVALID(s_axi_S_AXI_BUNDLE_ARVALID),
    .ARREADY(s_axi_S_AXI_BUNDLE_ARREADY),
    .ARADDR(s_axi_S_AXI_BUNDLE_ARADDR),
    .RVALID(s_axi_S_AXI_BUNDLE_RVALID),
    .RREADY(s_axi_S_AXI_BUNDLE_RREADY),
    .RDATA(s_axi_S_AXI_BUNDLE_RDATA),
    .RRESP(s_axi_S_AXI_BUNDLE_RRESP),
    .BVALID(s_axi_S_AXI_BUNDLE_BVALID),
    .BREADY(s_axi_S_AXI_BUNDLE_BREADY),
    .BRESP(s_axi_S_AXI_BUNDLE_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a_address0(grp_RLWE_enc2_fu_323_a_address0),
    .a_ce0(grp_RLWE_enc2_fu_323_a_ce0),
    .a_q0(a_q0),
    .c1_address0(c1_address0),
    .c1_ce0(c1_ce0),
    .c1_we0(c1_we0),
    .c1_d0(c1_d0),
    .c1_q0(c1_q0),
    .c2_address0(c2_address0),
    .c2_ce0(c2_ce0),
    .c2_we0(c2_we0),
    .c2_d0(grp_RLWE_enc2_fu_323_c2_d0),
    .c2_q0(c2_q0),
    .m_address0(grp_RLWE_enc2_fu_323_m_address0),
    .m_ce0(grp_RLWE_enc2_fu_323_m_ce0),
    .m_q0(m_q0),
    .p_address0(grp_RLWE_enc2_fu_323_p_address0),
    .p_ce0(grp_RLWE_enc2_fu_323_p_ce0),
    .p_q0(p_q0),
    .r2_address0(r2_address0),
    .r2_ce0(r2_ce0),
    .r2_q0(r2_q0),
    .arr(arr)
);

encdec_m_axi_m_axi #(
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M_AXI_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M_AXI_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M_AXI_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M_AXI_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M_AXI_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M_AXI_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M_AXI_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M_AXI_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_M_AXI_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_AXI_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_AXI_CACHE_VALUE ))
encdec_m_axi_m_axi_U(
    .AWVALID(m_axi_m_axi_AWVALID),
    .AWREADY(m_axi_m_axi_AWREADY),
    .AWADDR(m_axi_m_axi_AWADDR),
    .AWID(m_axi_m_axi_AWID),
    .AWLEN(m_axi_m_axi_AWLEN),
    .AWSIZE(m_axi_m_axi_AWSIZE),
    .AWBURST(m_axi_m_axi_AWBURST),
    .AWLOCK(m_axi_m_axi_AWLOCK),
    .AWCACHE(m_axi_m_axi_AWCACHE),
    .AWPROT(m_axi_m_axi_AWPROT),
    .AWQOS(m_axi_m_axi_AWQOS),
    .AWREGION(m_axi_m_axi_AWREGION),
    .AWUSER(m_axi_m_axi_AWUSER),
    .WVALID(m_axi_m_axi_WVALID),
    .WREADY(m_axi_m_axi_WREADY),
    .WDATA(m_axi_m_axi_WDATA),
    .WSTRB(m_axi_m_axi_WSTRB),
    .WLAST(m_axi_m_axi_WLAST),
    .WID(m_axi_m_axi_WID),
    .WUSER(m_axi_m_axi_WUSER),
    .ARVALID(m_axi_m_axi_ARVALID),
    .ARREADY(m_axi_m_axi_ARREADY),
    .ARADDR(m_axi_m_axi_ARADDR),
    .ARID(m_axi_m_axi_ARID),
    .ARLEN(m_axi_m_axi_ARLEN),
    .ARSIZE(m_axi_m_axi_ARSIZE),
    .ARBURST(m_axi_m_axi_ARBURST),
    .ARLOCK(m_axi_m_axi_ARLOCK),
    .ARCACHE(m_axi_m_axi_ARCACHE),
    .ARPROT(m_axi_m_axi_ARPROT),
    .ARQOS(m_axi_m_axi_ARQOS),
    .ARREGION(m_axi_m_axi_ARREGION),
    .ARUSER(m_axi_m_axi_ARUSER),
    .RVALID(m_axi_m_axi_RVALID),
    .RREADY(m_axi_m_axi_RREADY),
    .RDATA(m_axi_m_axi_RDATA),
    .RLAST(m_axi_m_axi_RLAST),
    .RID(m_axi_m_axi_RID),
    .RUSER(m_axi_m_axi_RUSER),
    .RRESP(m_axi_m_axi_RRESP),
    .BVALID(m_axi_m_axi_BVALID),
    .BREADY(m_axi_m_axi_BREADY),
    .BRESP(m_axi_m_axi_BRESP),
    .BID(m_axi_m_axi_BID),
    .BUSER(m_axi_m_axi_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(m_axi_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(m_axi_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(m_axi_RDATA),
    .I_RID(m_axi_RID),
    .I_RUSER(m_axi_RUSER),
    .I_RRESP(m_axi_RRESP),
    .I_RLAST(m_axi_RLAST),
    .I_AWVALID(m_axi_AWVALID),
    .I_AWREADY(m_axi_AWREADY),
    .I_AWADDR(m_axi_addr_reg_583),
    .I_AWID(1'd0),
    .I_AWLEN(32'd256),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(m_axi_WVALID),
    .I_WREADY(m_axi_WREADY),
    .I_WDATA(c1_load_reg_656),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(m_axi_BVALID),
    .I_BREADY(m_axi_BREADY),
    .I_BRESP(m_axi_BRESP),
    .I_BID(m_axi_BID),
    .I_BUSER(m_axi_BUSER)
);

RLWE_enc2 grp_RLWE_enc2_fu_323(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_RLWE_enc2_fu_323_ap_start),
    .ap_done(grp_RLWE_enc2_fu_323_ap_done),
    .ap_idle(grp_RLWE_enc2_fu_323_ap_idle),
    .ap_ready(grp_RLWE_enc2_fu_323_ap_ready),
    .a_address0(grp_RLWE_enc2_fu_323_a_address0),
    .a_ce0(grp_RLWE_enc2_fu_323_a_ce0),
    .a_q0(a_q0),
    .c1_address0(grp_RLWE_enc2_fu_323_c1_address0),
    .c1_ce0(grp_RLWE_enc2_fu_323_c1_ce0),
    .c1_we0(grp_RLWE_enc2_fu_323_c1_we0),
    .c1_d0(grp_RLWE_enc2_fu_323_c1_d0),
    .c1_q0(c1_q0),
    .c2_address0(grp_RLWE_enc2_fu_323_c2_address0),
    .c2_ce0(grp_RLWE_enc2_fu_323_c2_ce0),
    .c2_we0(grp_RLWE_enc2_fu_323_c2_we0),
    .c2_d0(grp_RLWE_enc2_fu_323_c2_d0),
    .c2_q0(c2_q0),
    .m_address0(grp_RLWE_enc2_fu_323_m_address0),
    .m_ce0(grp_RLWE_enc2_fu_323_m_ce0),
    .m_q0(m_q0),
    .p_address0(grp_RLWE_enc2_fu_323_p_address0),
    .p_ce0(grp_RLWE_enc2_fu_323_p_ce0),
    .p_q0(p_q0)
);

inv_ntt2 grp_inv_ntt2_fu_457(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_inv_ntt2_fu_457_ap_start),
    .ap_done(grp_inv_ntt2_fu_457_ap_done),
    .ap_idle(grp_inv_ntt2_fu_457_ap_idle),
    .ap_ready(grp_inv_ntt2_fu_457_ap_ready),
    .a_address0(grp_inv_ntt2_fu_457_a_address0),
    .a_ce0(grp_inv_ntt2_fu_457_a_ce0),
    .a_we0(grp_inv_ntt2_fu_457_a_we0),
    .a_d0(grp_inv_ntt2_fu_457_a_d0),
    .a_q0(c1_q0)
);

mod_r grp_mod_r_fu_463(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .x(grp_mod_r_fu_463_x),
    .ap_return(grp_mod_r_fu_463_ap_return),
    .ap_ce(grp_mod_r_fu_463_ap_ce)
);

encdec_mul_mul_167jG #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
encdec_mul_mul_167jG_U97(
    .din0(tmp_170_i_i_fu_577_p0),
    .din1(tmp_170_i_i_fu_577_p1),
    .dout(tmp_170_i_i_fu_577_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_RLWE_enc2_fu_323_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((grp_RLWE_enc2_fu_323_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state10)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((~((grp_inv_ntt2_fu_457_ap_done == 1'b0) | (ap_sig_ioackin_m_axi_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state18)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((~((grp_inv_ntt2_fu_457_ap_done == 1'b0) | (ap_sig_ioackin_m_axi_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_RLWE_enc2_fu_323_ap_start <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_reg_grp_RLWE_enc2_fu_323_ap_start <= 1'b1;
        end else if ((grp_RLWE_enc2_fu_323_ap_ready == 1'b1)) begin
            ap_reg_grp_RLWE_enc2_fu_323_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_inv_ntt2_fu_457_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_reg_grp_inv_ntt2_fu_457_ap_start <= 1'b1;
        end else if ((grp_inv_ntt2_fu_457_ap_ready == 1'b1)) begin
            ap_reg_grp_inv_ntt2_fu_457_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_m_axi_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            if (~((grp_inv_ntt2_fu_457_ap_done == 1'b0) | (ap_sig_ioackin_m_axi_AWREADY == 1'b0))) begin
                ap_reg_ioackin_m_axi_AWREADY <= 1'b0;
            end else if (((grp_inv_ntt2_fu_457_ap_done == 1'b1) & (m_axi_AWREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_m_axi_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_reg_pp2_iter1_exitcond_reg_642 == 1'd0))) begin
            if ((1'b0 == ap_block_pp2_stage0_11001)) begin
                ap_reg_ioackin_m_axi_WREADY <= 1'b0;
            end else if (((m_axi_WREADY == 1'b1) & (1'b0 == ap_block_pp2_stage0_01001))) begin
                ap_reg_ioackin_m_axi_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_fu_560_p2 == 1'd0))) begin
        i_reg_312 <= i_4_fu_566_p2;
    end else if ((~((grp_inv_ntt2_fu_457_ap_done == 1'b0) | (ap_sig_ioackin_m_axi_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
        i_reg_312 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_i3_i_reg_301 <= 9'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i4_i_reg_613 == 1'd0))) begin
        j_i3_i_reg_301 <= j_9_reg_617;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_reg_589 == 1'd0))) begin
        j_i_i_reg_290 <= j_reg_593;
    end else if (((grp_RLWE_enc2_fu_323_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_i_reg_290 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_c1_addr_1_reg_598 <= c1_addr_1_reg_598;
        ap_reg_pp0_iter1_exitcond_i_i_reg_589 <= exitcond_i_i_reg_589;
        ap_reg_pp0_iter2_c1_addr_1_reg_598 <= ap_reg_pp0_iter1_c1_addr_1_reg_598;
        ap_reg_pp0_iter2_exitcond_i_i_reg_589 <= ap_reg_pp0_iter1_exitcond_i_i_reg_589;
        exitcond_i_i_reg_589 <= exitcond_i_i_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_reg_pp1_iter1_c1_addr_2_reg_622 <= c1_addr_2_reg_622;
        ap_reg_pp1_iter1_exitcond_i4_i_reg_613 <= exitcond_i4_i_reg_613;
        ap_reg_pp1_iter2_c1_addr_2_reg_622 <= ap_reg_pp1_iter1_c1_addr_2_reg_622;
        ap_reg_pp1_iter2_exitcond_i4_i_reg_613 <= ap_reg_pp1_iter1_exitcond_i4_i_reg_613;
        exitcond_i4_i_reg_613 <= exitcond_i4_i_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_reg_pp2_iter1_exitcond_reg_642 <= exitcond_reg_642;
        exitcond_reg_642 <= exitcond_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_fu_488_p2 == 1'd0))) begin
        c1_addr_1_reg_598 <= tmp_i_i_fu_500_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i4_i_fu_519_p2 == 1'd0))) begin
        c1_addr_2_reg_622 <= tmp_i5_i_fu_531_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_reg_642 == 1'd0))) begin
        c1_load_reg_656 <= c1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_9_reg_617 <= j_9_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_593 <= j_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_RLWE_enc2_fu_323_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_addr_reg_583[30 : 0] <= tmp_46_fu_478_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_i_i_reg_589 == 1'd0))) begin
        tmp_170_i_i_reg_608 <= tmp_170_i_i_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_i4_i_reg_613 == 1'd0))) begin
        tmp_176_i_i_reg_632 <= tmp_176_i_i_fu_545_p2;
    end
end

always @ (*) begin
    if ((exitcond_i_i_fu_488_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_i4_i_fu_519_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_560_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i4_i_reg_613 == 1'd0))) begin
        ap_phi_mux_j_i3_i_phi_fu_305_p4 = j_9_reg_617;
    end else begin
        ap_phi_mux_j_i3_i_phi_fu_305_p4 = j_i3_i_reg_301;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_reg_589 == 1'd0))) begin
        ap_phi_mux_j_i_i_phi_fu_294_p4 = j_reg_593;
    end else begin
        ap_phi_mux_j_i_i_phi_fu_294_p4 = j_i_i_reg_290;
    end
end

always @ (*) begin
    if (((m_axi_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_AWREADY = m_axi_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_WREADY = m_axi_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        c1_address0 = tmp_fu_572_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        c1_address0 = ap_reg_pp1_iter2_c1_addr_2_reg_622;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        c1_address0 = tmp_i5_i_fu_531_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        c1_address0 = ap_reg_pp0_iter2_c1_addr_1_reg_598;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c1_address0 = tmp_i_i_fu_500_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        c1_address0 = grp_inv_ntt2_fu_457_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c1_address0 = grp_RLWE_enc2_fu_323_c1_address0;
    end else begin
        c1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        c1_ce0 = grp_inv_ntt2_fu_457_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c1_ce0 = grp_RLWE_enc2_fu_323_c1_ce0;
    end else begin
        c1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        c1_d0 = p_trunc4_ext_fu_555_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        c1_d0 = p_trunc_ext_fu_514_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        c1_d0 = grp_inv_ntt2_fu_457_a_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c1_d0 = grp_RLWE_enc2_fu_323_c1_d0;
    end else begin
        c1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_reg_pp1_iter2_exitcond_i4_i_reg_613 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter2_exitcond_i_i_reg_589 == 1'd0)))) begin
        c1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        c1_we0 = grp_inv_ntt2_fu_457_a_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c1_we0 = grp_RLWE_enc2_fu_323_c1_we0;
    end else begin
        c1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        c2_address0 = tmp_i5_i_fu_531_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c2_address0 = grp_RLWE_enc2_fu_323_c2_address0;
    end else begin
        c2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        c2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c2_ce0 = grp_RLWE_enc2_fu_323_c2_ce0;
    end else begin
        c2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c2_we0 = grp_RLWE_enc2_fu_323_c2_we0;
    end else begin
        c2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_mod_r_fu_463_ap_ce = 1'b1;
    end else begin
        grp_mod_r_fu_463_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i4_i_reg_613 == 1'd0))) begin
        grp_mod_r_fu_463_x = tmp_176_i_i_cast_fu_551_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_reg_589 == 1'd0))) begin
        grp_mod_r_fu_463_x = tmp_170_i_i_reg_608;
    end else begin
        grp_mod_r_fu_463_x = 'bx;
    end
end

always @ (*) begin
    if (((grp_inv_ntt2_fu_457_ap_done == 1'b1) & (ap_reg_ioackin_m_axi_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17))) begin
        m_axi_AWVALID = 1'b1;
    end else begin
        m_axi_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        m_axi_BREADY = 1'b1;
    end else begin
        m_axi_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_WREADY == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_reg_pp2_iter1_exitcond_reg_642 == 1'd0) & (1'b0 == ap_block_pp2_stage0_01001))) begin
        m_axi_WVALID = 1'b1;
    end else begin
        m_axi_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        m_axi_blk_n_AW = m_axi_m_axi_AWREADY;
    end else begin
        m_axi_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        m_axi_blk_n_B = m_axi_m_axi_BVALID;
    end else begin
        m_axi_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_reg_pp2_iter1_exitcond_reg_642 == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        m_axi_blk_n_W = m_axi_m_axi_WREADY;
    end else begin
        m_axi_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r2_ce0 = 1'b1;
    end else begin
        r2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_RLWE_enc2_fu_323_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_i_fu_488_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_i_fu_488_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_i4_i_fu_519_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_i4_i_fu_519_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if ((~((grp_inv_ntt2_fu_457_ap_done == 1'b0) | (ap_sig_ioackin_m_axi_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (exitcond_fu_560_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (exitcond_fu_560_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((m_axi_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

assign ap_block_state10_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((ap_sig_ioackin_m_axi_WREADY == 1'b0) & (ap_reg_pp2_iter1_exitcond_reg_642 == 1'd0));
end

assign ap_block_state20_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign arr1_fu_468_p4 = {{arr[31:1]}};

assign exitcond_fu_560_p2 = ((i_reg_312 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_i4_i_fu_519_p2 = ((ap_phi_mux_j_i3_i_phi_fu_305_p4 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_488_p2 = ((ap_phi_mux_j_i_i_phi_fu_294_p4 == 9'd256) ? 1'b1 : 1'b0);

assign grp_RLWE_enc2_fu_323_ap_start = ap_reg_grp_RLWE_enc2_fu_323_ap_start;

assign grp_inv_ntt2_fu_457_ap_start = ap_reg_grp_inv_ntt2_fu_457_ap_start;

assign i_4_fu_566_p2 = (i_reg_312 + 9'd1);

assign j_9_fu_525_p2 = (ap_phi_mux_j_i3_i_phi_fu_305_p4 + 9'd1);

assign j_fu_494_p2 = (ap_phi_mux_j_i_i_phi_fu_294_p4 + 9'd1);

assign p_trunc4_ext_fu_555_p1 = $signed(grp_mod_r_fu_463_ap_return);

assign p_trunc_ext_fu_514_p1 = $signed(grp_mod_r_fu_463_ap_return);

assign r2_address0 = tmp_i_i_fu_500_p1;

assign tmp_170_i_i_fu_577_p0 = tmp_170_i_i_fu_577_p00;

assign tmp_170_i_i_fu_577_p00 = c1_q0;

assign tmp_170_i_i_fu_577_p1 = tmp_170_i_i_fu_577_p10;

assign tmp_170_i_i_fu_577_p10 = r2_q0;

assign tmp_175_i_i_cast_fu_541_p1 = c2_q0;

assign tmp_176_i_i_cast_fu_551_p1 = tmp_176_i_i_reg_632;

assign tmp_176_i_i_fu_545_p2 = (tmp_i8_i_cast_fu_537_p1 + tmp_175_i_i_cast_fu_541_p1);

assign tmp_46_fu_478_p1 = arr1_fu_468_p4;

assign tmp_fu_572_p1 = i_reg_312;

assign tmp_i5_i_fu_531_p1 = ap_phi_mux_j_i3_i_phi_fu_305_p4;

assign tmp_i8_i_cast_fu_537_p1 = c1_q0;

assign tmp_i_i_fu_500_p1 = ap_phi_mux_j_i_i_phi_fu_294_p4;

always @ (posedge ap_clk) begin
    m_axi_addr_reg_583[31] <= 1'b0;
end

endmodule //encdec
