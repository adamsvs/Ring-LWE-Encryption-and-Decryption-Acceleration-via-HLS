// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rearrange2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        a_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] a_address0;
output   a_ce0;
output   a_we0;
output  [15:0] a_d0;
input  [15:0] a_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] a_address0;
reg a_ce0;
reg a_we0;
reg[15:0] a_d0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] reg_88;
wire    ap_CS_fsm_state5;
reg   [0:0] exitcond_reg_168;
reg   [0:0] tmp_s_reg_177;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_93_p2;
wire    ap_CS_fsm_state2;
reg   [6:0] swp_index_fu_99_p4;
reg   [6:0] swp_index_reg_172;
wire   [0:0] tmp_s_fu_113_p2;
wire   [7:0] tmp_fu_119_p2;
reg   [7:0] tmp_reg_181;
reg   [7:0] a_addr_reg_186;
reg   [15:0] u1_reg_191;
wire    ap_CS_fsm_state3;
reg   [7:0] a_addr_1_reg_196;
reg   [15:0] u2_reg_201;
wire    ap_CS_fsm_state4;
wire   [7:0] tmp_7_fu_140_p3;
reg   [7:0] tmp_7_reg_206;
reg   [7:0] a_addr_2_reg_211;
reg   [7:0] a_addr_3_reg_216;
wire   [7:0] i_1_fu_162_p2;
wire    ap_CS_fsm_state9;
reg   [7:0] i_reg_76;
wire   [63:0] tmp_3_fu_125_p1;
wire   [63:0] tmp_5_fu_135_p1;
wire   [63:0] tmp_8_fu_147_p1;
wire   [63:0] tmp_1_fu_157_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [7:0] swp_index_cast_fu_109_p1;
wire   [7:0] tmp_4_fu_130_p2;
wire   [7:0] tmp_9_fu_152_p2;
wire    ap_CS_fsm_state10;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_168 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i_reg_76 <= i_1_fu_162_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_76 <= 8'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_177 == 1'd1) & (exitcond_reg_168 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        a_addr_1_reg_196[7 : 1] <= tmp_5_fu_135_p1[7 : 1];
        u1_reg_191 <= a_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_177 == 1'd1) & (exitcond_reg_168 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        a_addr_2_reg_211[7 : 1] <= tmp_8_fu_147_p1[7 : 1];
        tmp_7_reg_206[7 : 1] <= tmp_7_fu_140_p3[7 : 1];
        u2_reg_201 <= a_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_177 == 1'd1) & (exitcond_reg_168 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        a_addr_3_reg_216[7 : 1] <= tmp_1_fu_157_p1[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_113_p2 == 1'd1) & (exitcond_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_addr_reg_186[7 : 1] <= tmp_3_fu_125_p1[7 : 1];
        tmp_reg_181[7 : 1] <= tmp_fu_119_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        exitcond_reg_168 <= exitcond_fu_93_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_s_reg_177 == 1'd1) & (exitcond_reg_168 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_s_reg_177 == 1'd1) & (exitcond_reg_168 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_88 <= a_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        swp_index_reg_172 <= swp_index_fu_99_p4;
        tmp_s_reg_177 <= tmp_s_fu_113_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        a_address0 = a_addr_3_reg_216;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        a_address0 = a_addr_2_reg_211;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_address0 = a_addr_1_reg_196;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_address0 = a_addr_reg_186;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address0 = tmp_1_fu_157_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = tmp_8_fu_147_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = tmp_5_fu_135_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address0 = tmp_3_fu_125_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        a_d0 = u2_reg_201;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        a_d0 = u1_reg_191;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        a_d0 = reg_88;
    end else begin
        a_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_s_reg_177 == 1'd1) & (exitcond_reg_168 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_s_reg_177 == 1'd1) & (exitcond_reg_168 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_s_reg_177 == 1'd1) & (exitcond_reg_168 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_s_reg_177 == 1'd1) & (exitcond_reg_168 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond_fu_93_p2 = ((i_reg_76 == 8'd128) ? 1'b1 : 1'b0);

assign i_1_fu_162_p2 = (i_reg_76 + 8'd1);

assign swp_index_cast_fu_109_p1 = swp_index_fu_99_p4;

integer ap_tvar_int_0;

always @ (i_reg_76) begin
    for (ap_tvar_int_0 = 7 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 6 - 0) begin
            swp_index_fu_99_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            swp_index_fu_99_p4[ap_tvar_int_0] = i_reg_76[6 - ap_tvar_int_0];
        end
    end
end

assign tmp_1_fu_157_p1 = tmp_9_fu_152_p2;

assign tmp_3_fu_125_p1 = tmp_fu_119_p2;

assign tmp_4_fu_130_p2 = (tmp_reg_181 | 8'd1);

assign tmp_5_fu_135_p1 = tmp_4_fu_130_p2;

assign tmp_7_fu_140_p3 = {{swp_index_reg_172}, {1'd0}};

assign tmp_8_fu_147_p1 = tmp_7_fu_140_p3;

assign tmp_9_fu_152_p2 = (tmp_7_reg_206 | 8'd1);

assign tmp_fu_119_p2 = i_reg_76 << 8'd1;

assign tmp_s_fu_113_p2 = ((swp_index_cast_fu_109_p1 > i_reg_76) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_reg_181[0] <= 1'b0;
    a_addr_reg_186[0] <= 1'b0;
    a_addr_1_reg_196[0] <= 1'b1;
    tmp_7_reg_206[0] <= 1'b0;
    a_addr_2_reg_211[0] <= 1'b0;
    a_addr_3_reg_216[0] <= 1'b1;
end

endmodule //rearrange2
