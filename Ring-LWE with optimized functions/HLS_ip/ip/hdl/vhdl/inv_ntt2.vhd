-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inv_ntt2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of inv_ntt2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv15_D37 : STD_LOGIC_VECTOR (14 downto 0) := "000110100110111";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_19C9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100111001001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1DA0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110110100000";
    constant ap_const_lv32_19A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100110101001";
    constant ap_const_lv32_167C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011001111100";
    constant ap_const_lv32_6C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011011000000";
    constant ap_const_lv32_1E00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111000000000";
    constant ap_const_lv32_D37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110100110111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv29_B40 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000101101000000";
    constant ap_const_lv29_9B1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100110110001";
    constant ap_const_lv30_1DE3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001110111100011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal omega_1_reg_227 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_1_reg_238 : STD_LOGIC_VECTOR (8 downto 0);
    signal omega_2_reg_250 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_2_reg_261 : STD_LOGIC_VECTOR (8 downto 0);
    signal omega2_reg_273 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mod_r_fu_284_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_294 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state23_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state27_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state31_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal tmp_106_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_tmp_106_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state35_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state43_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal tmp_110_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mod_r_fu_289_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_300 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_state36_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state40_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state44_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal ap_reg_pp2_iter2_tmp_110_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_state37_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state41_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_state45_pp2_stage2_iter2 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal tmp_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal primrt_1_fu_418_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal primrt_1_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_474_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_962 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_fu_482_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_105_reg_967 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_46_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_6_fu_499_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_6_reg_976 : STD_LOGIC_VECTOR (30 downto 0);
    signal omega4_cast_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega4_cast_reg_981 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_addr_8_reg_996 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_9_reg_1001 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_10_reg_1006 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_11_reg_1011 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_1_fu_894_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_1_reg_1021 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal t2_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t2_reg_1026 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal a_load_6_reg_1031 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal a_load_8_reg_1036 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_73_fu_619_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_73_reg_1041 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_75_fu_625_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_75_reg_1046 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_116_cast_fu_642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_77_fu_646_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_77_reg_1056 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_79_fu_652_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_79_reg_1061 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_120_cast_fu_658_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_118_cast_fu_662_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_122_cast_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal omega_3_fu_690_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_3_reg_1081 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal omega_1_cast3_fu_694_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_1_cast3_reg_1086 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state22_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_106_fu_698_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter2_tmp_106_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter1_a_addr_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter2_a_addr_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_5_reg_1100 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter1_a_addr_5_reg_1100 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter2_a_addr_5_reg_1100 : STD_LOGIC_VECTOR (7 downto 0);
    signal omega_fu_904_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal omega_reg_1105 : STD_LOGIC_VECTOR (28 downto 0);
    signal t1_fu_910_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_cast_fu_737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_fu_741_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_reg_1120 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state25_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state29_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_state33_pp1_stage3_iter2 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal tmp_52_fu_759_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_52_reg_1130 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state24_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state28_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_state32_pp1_stage2_iter2 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal tmp_54_fu_765_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_54_reg_1135 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_76_cast_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_cast_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_2_cast2_fu_789_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_2_cast2_reg_1150 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega2_cast1_fu_793_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega2_cast1_reg_1155 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_110_fu_797_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter1_tmp_110_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_809_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_112_reg_1164 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_6_reg_1169 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp2_iter1_a_addr_6_reg_1169 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp2_iter2_a_addr_6_reg_1169 : STD_LOGIC_VECTOR (7 downto 0);
    signal omega_4_fu_916_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal omega_4_reg_1174 : STD_LOGIC_VECTOR (28 downto 0);
    signal omega2_1_fu_922_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal omega2_1_reg_1179 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_84_fu_928_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_addr_7_reg_1189 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp2_iter1_a_addr_7_reg_1189 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp2_iter2_a_addr_7_reg_1189 : STD_LOGIC_VECTOR (7 downto 0);
    signal omega_4_cast_fu_839_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega2_1_cast_fu_843_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_fu_934_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_fu_854_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_5_reg_1209 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp2_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage3 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state38_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_state42_pp2_stage3_iter1 : BOOLEAN;
    signal ap_block_state46_pp2_stage3_iter2 : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal tmp_86_fu_940_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_86_reg_1219 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_88_cast_fu_868_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_fu_946_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_92_reg_1229 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_95_cast_fu_880_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state22 : STD_LOGIC;
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state35 : STD_LOGIC;
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal grp_mod_r_fu_284_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_284_ap_ce : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_mod_r_fu_289_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_289_ap_ce : STD_LOGIC;
    signal primrt_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_181 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega4_reg_193 : STD_LOGIC_VECTOR (14 downto 0);
    signal j4_reg_204 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_omega_1_phi_fu_231_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_j_1_phi_fu_242_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_omega_2_phi_fu_254_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_j_2_phi_fu_265_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_omega2_phi_fu_277_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal ap_block_pp2_stage3 : BOOLEAN;
    signal tmp_62_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_72_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_88_fu_834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_trunc_ext_fu_666_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc22_ext_fu_675_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc21_ext_fu_680_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc23_ext_fu_685_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc24_ext_fu_779_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc25_ext_fu_784_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc26_ext_fu_884_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc27_ext_fu_889_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_cast_fu_336_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_316_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp8_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_cast_fu_370_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp5_fu_350_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp7_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_cast_fu_404_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp9_fu_384_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_440_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_41_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_460_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_104_fu_426_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j4_cast_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega4_cast4_fu_486_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_fu_515_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_111_fu_531_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_58_fu_535_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_59_fu_541_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_fu_549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_fu_565_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_67_fu_570_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_3_trunc_ext_fu_608_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal u1_1_cast_fu_616_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal t1_3_cast_fu_612_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal t2_1_trunc_ext_fu_631_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal u2_cast_fu_639_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal t2_1_cast_fu_635_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal omega_3_fu_690_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_108_fu_710_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_719_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal t1_1_trunc_ext_fu_751_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_1_cast_fu_755_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal u1_cast_fu_747_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_4_fu_829_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_87_trunc_ext_fu_860_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_94_trunc_ext_fu_872_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_1_fu_894_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_1_fu_894_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t2_fu_899_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t2_fu_899_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_fu_904_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal omega_fu_904_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_fu_910_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_fu_910_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_4_fu_916_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal omega_4_fu_916_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega2_1_fu_922_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal omega2_1_fu_922_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_84_fu_928_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_84_fu_928_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_90_fu_934_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_90_fu_934_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_86_fu_940_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_86_fu_940_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_92_fu_946_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_92_fu_946_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal omega2_1_fu_922_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal omega_4_fu_916_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal omega_fu_904_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal t1_1_fu_894_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_910_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_910_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal t2_fu_899_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_928_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_928_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_fu_940_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_90_fu_934_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_fu_934_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_fu_946_p10 : STD_LOGIC_VECTOR (29 downto 0);

    component mod_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component encdec_mul_mul_167jG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encdec_mul_mul_138jQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component encdec_mul_mul_149j0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    grp_mod_r_fu_284 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x => grp_mod_r_fu_284_x,
        ap_return => grp_mod_r_fu_284_ap_return,
        ap_ce => grp_mod_r_fu_284_ap_ce);

    grp_mod_r_fu_289 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x => grp_mod_r_fu_289_x,
        ap_return => grp_mod_r_fu_289_ap_return,
        ap_ce => grp_mod_r_fu_289_ap_ce);

    encdec_mul_mul_167jG_U86 : component encdec_mul_mul_167jG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => t1_1_fu_894_p0,
        din1 => t1_1_fu_894_p1,
        dout => t1_1_fu_894_p2);

    encdec_mul_mul_167jG_U87 : component encdec_mul_mul_167jG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => t2_fu_899_p0,
        din1 => t2_fu_899_p1,
        dout => t2_fu_899_p2);

    encdec_mul_mul_138jQ_U88 : component encdec_mul_mul_138jQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => omega_fu_904_p0,
        din1 => omega_fu_904_p1,
        dout => omega_fu_904_p2);

    encdec_mul_mul_167jG_U89 : component encdec_mul_mul_167jG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => t1_fu_910_p0,
        din1 => t1_fu_910_p1,
        dout => t1_fu_910_p2);

    encdec_mul_mul_138jQ_U90 : component encdec_mul_mul_138jQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => omega_4_fu_916_p0,
        din1 => omega_4_fu_916_p1,
        dout => omega_4_fu_916_p2);

    encdec_mul_mul_138jQ_U91 : component encdec_mul_mul_138jQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => omega2_1_fu_922_p0,
        din1 => omega2_1_fu_922_p1,
        dout => omega2_1_fu_922_p2);

    encdec_mul_mul_167jG_U92 : component encdec_mul_mul_167jG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_84_fu_928_p0,
        din1 => tmp_84_fu_928_p1,
        dout => tmp_84_fu_928_p2);

    encdec_mul_mul_167jG_U93 : component encdec_mul_mul_167jG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_90_fu_934_p0,
        din1 => tmp_90_fu_934_p1,
        dout => tmp_90_fu_934_p2);

    encdec_mul_mul_149j0_U94 : component encdec_mul_mul_149j0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => tmp_86_fu_940_p0,
        din1 => tmp_86_fu_940_p1,
        dout => tmp_86_fu_940_p2);

    encdec_mul_mul_149j0_U95 : component encdec_mul_mul_149j0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => tmp_92_fu_946_p0,
        din1 => tmp_92_fu_946_p1,
        dout => tmp_92_fu_946_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state22) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((tmp_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state22)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state22);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((tmp_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state35) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state35)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state35);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j4_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                j4_reg_204 <= j_6_reg_976;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_304_p2 = ap_const_lv1_1))) then 
                j4_reg_204 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_1_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_reg_238 <= ap_const_lv9_0;
            elsif (((tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_1_reg_238 <= j_3_reg_1120;
            end if; 
        end if;
    end process;

    j_2_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                j_2_reg_261 <= ap_const_lv9_0;
            elsif (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                j_2_reg_261 <= j_5_reg_1209;
            end if; 
        end if;
    end process;

    k_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_46_fu_494_p2 = ap_const_lv1_1))) then 
                k_reg_216 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                k_reg_216 <= k_1_reg_1016;
            end if; 
        end if;
    end process;

    m_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_46_fu_494_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                                m_reg_181(31 downto 1) <= m_1_fu_509_p2(31 downto 1);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_reg_181(1) <= '1';
                m_reg_181(2) <= '0';
                m_reg_181(3) <= '0';
                m_reg_181(4) <= '0';
                m_reg_181(5) <= '0';
                m_reg_181(6) <= '0';
                m_reg_181(7) <= '0';
                m_reg_181(8) <= '0';
                m_reg_181(9) <= '0';
                m_reg_181(10) <= '0';
                m_reg_181(11) <= '0';
                m_reg_181(12) <= '0';
                m_reg_181(13) <= '0';
                m_reg_181(14) <= '0';
                m_reg_181(15) <= '0';
                m_reg_181(16) <= '0';
                m_reg_181(17) <= '0';
                m_reg_181(18) <= '0';
                m_reg_181(19) <= '0';
                m_reg_181(20) <= '0';
                m_reg_181(21) <= '0';
                m_reg_181(22) <= '0';
                m_reg_181(23) <= '0';
                m_reg_181(24) <= '0';
                m_reg_181(25) <= '0';
                m_reg_181(26) <= '0';
                m_reg_181(27) <= '0';
                m_reg_181(28) <= '0';
                m_reg_181(29) <= '0';
                m_reg_181(30) <= '0';
                m_reg_181(31) <= '0';
            end if; 
        end if;
    end process;

    omega2_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                omega2_reg_273 <= ap_const_lv15_D37;
            elsif (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                omega2_reg_273 <= grp_mod_r_fu_289_ap_return;
            end if; 
        end if;
    end process;

    omega4_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                omega4_reg_193 <= grp_mod_r_fu_284_ap_return;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_304_p2 = ap_const_lv1_1))) then 
                omega4_reg_193 <= ap_const_lv15_1;
            end if; 
        end if;
    end process;

    omega_1_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                omega_1_reg_227 <= ap_const_lv15_1;
            elsif (((tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                omega_1_reg_227 <= grp_mod_r_fu_284_ap_return;
            end if; 
        end if;
    end process;

    omega_2_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                omega_2_reg_250 <= ap_const_lv15_1;
            elsif (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                omega_2_reg_250 <= grp_mod_r_fu_284_ap_return;
            end if; 
        end if;
    end process;

    primrt_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_46_fu_494_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                primrt_reg_170 <= primrt_1_reg_956;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                primrt_reg_170 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_fu_525_p2 = ap_const_lv1_1))) then
                    a_addr_10_reg_1006(7 downto 1) <= tmp_69_fu_584_p1(8 - 1 downto 0)(7 downto 1);
                    a_addr_11_reg_1011(7 downto 1) <= tmp_72_fu_589_p1(8 - 1 downto 0)(7 downto 1);
                    a_addr_8_reg_996(7 downto 1) <= tmp_62_fu_555_p1(8 - 1 downto 0)(7 downto 1);
                    a_addr_9_reg_1001(7 downto 1) <= tmp_65_fu_560_p1(8 - 1 downto 0)(7 downto 1);
                k_1_reg_1016 <= k_1_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_106_fu_698_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    a_addr_5_reg_1100(7 downto 1) <= tmp_49_fu_725_p1(8 - 1 downto 0)(7 downto 1);
                a_addr_reg_1095 <= tmp_48_fu_714_p1(8 - 1 downto 0);
                omega_reg_1105 <= omega_fu_904_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_110_fu_797_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                a_addr_6_reg_1169 <= tmp_82_fu_817_p1(8 - 1 downto 0);
                omega2_1_reg_1179 <= omega2_1_fu_922_p2;
                omega_4_reg_1174 <= omega_4_fu_916_p2;
                tmp_112_reg_1164 <= tmp_112_fu_809_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                    a_addr_7_reg_1189(7 downto 1) <= tmp_88_fu_834_p1(8 - 1 downto 0)(7 downto 1);
                tmp_84_reg_1184 <= tmp_84_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                a_load_6_reg_1031 <= a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                a_load_8_reg_1036 <= a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ap_reg_pp1_iter1_a_addr_5_reg_1100(7 downto 1) <= a_addr_5_reg_1100(7 downto 1);
                ap_reg_pp1_iter1_a_addr_reg_1095 <= a_addr_reg_1095;
                ap_reg_pp1_iter1_tmp_106_reg_1091 <= tmp_106_reg_1091;
                    ap_reg_pp1_iter2_a_addr_5_reg_1100(7 downto 1) <= ap_reg_pp1_iter1_a_addr_5_reg_1100(7 downto 1);
                ap_reg_pp1_iter2_a_addr_reg_1095 <= ap_reg_pp1_iter1_a_addr_reg_1095;
                ap_reg_pp1_iter2_tmp_106_reg_1091 <= ap_reg_pp1_iter1_tmp_106_reg_1091;
                omega_1_cast3_reg_1086 <= omega_1_cast3_fu_694_p1;
                tmp_106_reg_1091 <= ap_phi_mux_j_1_phi_fu_242_p4(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                ap_reg_pp2_iter1_a_addr_6_reg_1169 <= a_addr_6_reg_1169;
                ap_reg_pp2_iter1_tmp_110_reg_1160 <= tmp_110_reg_1160;
                ap_reg_pp2_iter2_a_addr_6_reg_1169 <= ap_reg_pp2_iter1_a_addr_6_reg_1169;
                ap_reg_pp2_iter2_tmp_110_reg_1160 <= ap_reg_pp2_iter1_tmp_110_reg_1160;
                omega2_cast1_reg_1155 <= omega2_cast1_fu_793_p1;
                omega_2_cast2_reg_1150 <= omega_2_cast2_fu_789_p1;
                tmp_110_reg_1160 <= ap_phi_mux_j_2_phi_fu_265_p4(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                    ap_reg_pp2_iter1_a_addr_7_reg_1189(7 downto 1) <= a_addr_7_reg_1189(7 downto 1);
                    ap_reg_pp2_iter2_a_addr_7_reg_1189(7 downto 1) <= ap_reg_pp2_iter1_a_addr_7_reg_1189(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then
                j_3_reg_1120 <= j_3_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                j_5_reg_1209 <= j_5_fu_854_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_6_reg_976 <= j_6_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_46_fu_494_p2 = ap_const_lv1_1))) then
                    omega4_cast_reg_981(15 downto 0) <= omega4_cast_fu_505_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                omega_3_reg_1081 <= omega_3_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_304_p2 = ap_const_lv1_1))) then
                primrt_1_reg_956 <= primrt_1_fu_418_p3;
                tmp_105_reg_967 <= tmp_105_fu_482_p1;
                tmp_45_reg_962 <= tmp_45_fu_474_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_reg_pp1_iter1_tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then
                reg_294 <= grp_mod_r_fu_284_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_reg_pp2_iter2_tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_reg_pp2_iter2_tmp_110_reg_1160 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)))) then
                reg_300 <= grp_mod_r_fu_289_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                t1_1_reg_1021 <= t1_1_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                t1_reg_1110 <= t1_fu_910_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                t2_reg_1026 <= t2_fu_899_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp1_iter1_tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then
                tmp_52_reg_1130 <= tmp_52_fu_759_p2;
                tmp_54_reg_1135 <= tmp_54_fu_765_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_73_reg_1041 <= tmp_73_fu_619_p2;
                tmp_75_reg_1046 <= tmp_75_fu_625_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_77_reg_1056 <= tmp_77_fu_646_p2;
                tmp_79_reg_1061 <= tmp_79_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp2_iter1_tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                tmp_86_reg_1219 <= tmp_86_fu_940_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                tmp_90_reg_1204 <= tmp_90_fu_934_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp2_iter1_tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                tmp_92_reg_1229 <= tmp_92_fu_946_p2;
            end if;
        end if;
    end process;
    omega4_cast_reg_981(31 downto 16) <= "0000000000000000";
    a_addr_8_reg_996(0) <= '1';
    a_addr_9_reg_1001(0) <= '0';
    a_addr_10_reg_1006(0) <= '1';
    a_addr_11_reg_1011(0) <= '0';
    a_addr_5_reg_1100(0) <= '1';
    ap_reg_pp1_iter1_a_addr_5_reg_1100(0) <= '1';
    ap_reg_pp1_iter2_a_addr_5_reg_1100(0) <= '1';
    a_addr_7_reg_1189(0) <= '1';
    ap_reg_pp2_iter1_a_addr_7_reg_1189(0) <= '1';
    ap_reg_pp2_iter2_a_addr_7_reg_1189(0) <= '1';
    m_reg_181(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, tmp_fu_304_p2, ap_CS_fsm_state2, tmp_46_fu_494_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_fu_525_p2, tmp_106_fu_698_p3, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter0, tmp_110_fu_797_p3, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0_subdone, ap_block_pp1_stage3_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_block_pp2_stage3_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone, ap_block_pp2_stage1_subdone, ap_block_pp2_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_46_fu_494_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_fu_525_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_106_fu_698_p3 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_106_fu_698_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_110_fu_797_p3 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_110_fu_797_p3 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp2_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter2, ap_CS_fsm_pp2_stage2, a_addr_8_reg_996, ap_CS_fsm_state4, a_addr_9_reg_1001, a_addr_10_reg_1006, a_addr_11_reg_1011, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_pp1_stage0, ap_reg_pp1_iter1_a_addr_reg_1095, ap_reg_pp1_iter2_a_addr_reg_1095, ap_reg_pp1_iter2_a_addr_5_reg_1100, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_reg_pp2_iter2_a_addr_6_reg_1169, ap_reg_pp2_iter2_a_addr_7_reg_1189, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp1_stage1, ap_block_pp1_stage2, ap_block_pp1_stage3, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, tmp_62_fu_555_p1, tmp_49_fu_725_p1, tmp_82_fu_817_p1, tmp_88_fu_834_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            a_address0 <= ap_reg_pp2_iter2_a_addr_7_reg_1189;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            a_address0 <= ap_reg_pp2_iter2_a_addr_6_reg_1169;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            a_address0 <= tmp_88_fu_834_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            a_address0 <= tmp_82_fu_817_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
            a_address0 <= ap_reg_pp1_iter2_a_addr_5_reg_1100;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            a_address0 <= ap_reg_pp1_iter2_a_addr_reg_1095;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            a_address0 <= ap_reg_pp1_iter1_a_addr_reg_1095;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            a_address0 <= tmp_49_fu_725_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            a_address0 <= a_addr_8_reg_996;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            a_address0 <= a_addr_11_reg_1011;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            a_address0 <= a_addr_9_reg_1001;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_address0 <= a_addr_10_reg_1006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address0 <= tmp_62_fu_555_p1(8 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter2, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter0, ap_block_pp1_stage3_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter0, ap_block_pp2_stage3_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_d0_assign_proc : process(ap_enable_reg_pp2_iter2, ap_CS_fsm_pp2_stage2, ap_CS_fsm_state13, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp1_iter2, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_block_pp1_stage2, ap_block_pp1_stage3, ap_block_pp2_stage2, ap_block_pp2_stage3, p_trunc_ext_fu_666_p1, p_trunc22_ext_fu_675_p1, p_trunc21_ext_fu_680_p1, p_trunc23_ext_fu_685_p1, p_trunc24_ext_fu_779_p1, p_trunc25_ext_fu_784_p1, p_trunc26_ext_fu_884_p1, p_trunc27_ext_fu_889_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            a_d0 <= p_trunc27_ext_fu_889_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            a_d0 <= p_trunc26_ext_fu_884_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
            a_d0 <= p_trunc25_ext_fu_784_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            a_d0 <= p_trunc24_ext_fu_779_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            a_d0 <= p_trunc23_ext_fu_685_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            a_d0 <= p_trunc21_ext_fu_680_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            a_d0 <= p_trunc22_ext_fu_675_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_d0 <= p_trunc_ext_fu_666_p1;
        else 
            a_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_we0_assign_proc : process(ap_enable_reg_pp2_iter2, ap_reg_pp2_iter2_tmp_110_reg_1160, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_state13, ap_reg_pp1_iter2_tmp_106_reg_1091, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_reg_pp1_iter2_tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_reg_pp1_iter2_tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)) or ((ap_reg_pp2_iter2_tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_reg_pp2_iter2_tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(22);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(23);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(24);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(26);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(27);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(28);
    ap_CS_fsm_pp2_stage3 <= ap_CS_fsm(29);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(25);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state47 <= ap_CS_fsm(30);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp2_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state22_assign_proc : process(tmp_106_fu_698_p3)
    begin
        if ((tmp_106_fu_698_p3 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state35_assign_proc : process(tmp_110_fu_797_p3)
    begin
        if ((tmp_110_fu_797_p3 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state35 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_242_p4_assign_proc : process(j_1_reg_238, ap_enable_reg_pp1_iter1, tmp_106_reg_1091, ap_CS_fsm_pp1_stage0, j_3_reg_1120, ap_block_pp1_stage0)
    begin
        if (((tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_j_1_phi_fu_242_p4 <= j_3_reg_1120;
        else 
            ap_phi_mux_j_1_phi_fu_242_p4 <= j_1_reg_238;
        end if; 
    end process;


    ap_phi_mux_j_2_phi_fu_265_p4_assign_proc : process(j_2_reg_261, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_110_reg_1160, j_5_reg_1209, ap_block_pp2_stage0)
    begin
        if (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_j_2_phi_fu_265_p4 <= j_5_reg_1209;
        else 
            ap_phi_mux_j_2_phi_fu_265_p4 <= j_2_reg_261;
        end if; 
    end process;


    ap_phi_mux_omega2_phi_fu_277_p4_assign_proc : process(omega2_reg_273, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_110_reg_1160, grp_mod_r_fu_289_ap_return, ap_block_pp2_stage0)
    begin
        if (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_omega2_phi_fu_277_p4 <= grp_mod_r_fu_289_ap_return;
        else 
            ap_phi_mux_omega2_phi_fu_277_p4 <= omega2_reg_273;
        end if; 
    end process;


    ap_phi_mux_omega_1_phi_fu_231_p4_assign_proc : process(omega_1_reg_227, grp_mod_r_fu_284_ap_return, ap_enable_reg_pp1_iter1, tmp_106_reg_1091, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0)
    begin
        if (((tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_omega_1_phi_fu_231_p4 <= grp_mod_r_fu_284_ap_return;
        else 
            ap_phi_mux_omega_1_phi_fu_231_p4 <= omega_1_reg_227;
        end if; 
    end process;


    ap_phi_mux_omega_2_phi_fu_254_p4_assign_proc : process(omega_2_reg_250, grp_mod_r_fu_284_ap_return, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_110_reg_1160, ap_block_pp2_stage0)
    begin
        if (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_omega_2_phi_fu_254_p4 <= grp_mod_r_fu_284_ap_return;
        else 
            ap_phi_mux_omega_2_phi_fu_254_p4 <= omega_2_reg_250;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_mod_r_fu_284_ap_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state17, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_state34, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_1 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_1 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((ap_const_boolean_1 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_const_boolean_1 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)) or ((ap_const_boolean_1 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_1 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)) or ((ap_const_boolean_1 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_1 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            grp_mod_r_fu_284_ap_ce <= ap_const_logic_0;
        else 
            grp_mod_r_fu_284_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_mod_r_fu_284_x_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, tmp_106_reg_1091, ap_reg_pp1_iter1_tmp_106_reg_1091, tmp_110_reg_1160, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, t1_1_reg_1021, t2_reg_1026, ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_116_cast_fu_642_p1, ap_CS_fsm_state10, tmp_120_cast_fu_658_p1, ap_CS_fsm_state11, tmp_118_cast_fu_662_p1, ap_CS_fsm_state12, tmp_122_cast_fu_671_p1, ap_CS_fsm_state13, omega_3_reg_1081, ap_CS_fsm_pp1_stage0, t1_reg_1110, omega_cast_fu_737_p1, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, tmp_76_cast_fu_771_p1, tmp_78_cast_fu_775_p1, tmp_84_reg_1184, omega_4_cast_fu_839_p1, tmp_90_reg_1204, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state18, ap_block_pp1_stage0, ap_block_pp1_stage1, ap_block_pp1_stage2, ap_block_pp1_stage3, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            grp_mod_r_fu_284_x <= tmp_90_reg_1204;
        elsif (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            grp_mod_r_fu_284_x <= tmp_84_reg_1184;
        elsif (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_mod_r_fu_284_x <= omega_4_cast_fu_839_p1;
        elsif (((ap_reg_pp1_iter1_tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_mod_r_fu_284_x <= tmp_78_cast_fu_775_p1;
        elsif (((ap_reg_pp1_iter1_tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
            grp_mod_r_fu_284_x <= tmp_76_cast_fu_771_p1;
        elsif (((tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_mod_r_fu_284_x <= t1_reg_1110;
        elsif (((tmp_106_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_mod_r_fu_284_x <= omega_cast_fu_737_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_mod_r_fu_284_x <= omega_3_reg_1081;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_mod_r_fu_284_x <= tmp_122_cast_fu_671_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_mod_r_fu_284_x <= tmp_118_cast_fu_662_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_mod_r_fu_284_x <= tmp_120_cast_fu_658_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_mod_r_fu_284_x <= tmp_116_cast_fu_642_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_mod_r_fu_284_x <= t2_reg_1026;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_mod_r_fu_284_x <= t1_1_reg_1021;
        else 
            grp_mod_r_fu_284_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_mod_r_fu_289_ap_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            grp_mod_r_fu_289_ap_ce <= ap_const_logic_1;
        else 
            grp_mod_r_fu_289_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_mod_r_fu_289_x_assign_proc : process(ap_enable_reg_pp2_iter1, tmp_110_reg_1160, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_reg_pp2_iter1_tmp_110_reg_1160, omega2_1_cast_fu_843_p1, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter0, tmp_88_cast_fu_868_p1, tmp_95_cast_fu_880_p1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((ap_reg_pp2_iter1_tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            grp_mod_r_fu_289_x <= tmp_95_cast_fu_880_p1;
        elsif (((ap_reg_pp2_iter1_tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            grp_mod_r_fu_289_x <= tmp_88_cast_fu_868_p1;
        elsif (((tmp_110_reg_1160 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_mod_r_fu_289_x <= omega2_1_cast_fu_843_p1;
        else 
            grp_mod_r_fu_289_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_fu_525_p2 <= "1" when (signed(tmp_109_fu_515_p4) < signed(ap_const_lv25_1)) else "0";
    j4_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_reg_204),32));
    j_3_fu_741_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(j_1_reg_238));
    j_4_fu_829_p2 <= (tmp_112_reg_1164 or ap_const_lv8_1);
    j_5_fu_854_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(j_2_reg_261));
    j_6_fu_499_p2 <= std_logic_vector(unsigned(j4_reg_204) + unsigned(ap_const_lv31_1));
    j_fu_719_p2 <= (tmp_108_fu_710_p1 or ap_const_lv8_1);
    k_1_fu_594_p2 <= std_logic_vector(unsigned(m_reg_181) + unsigned(k_reg_216));
    m_1_fu_509_p2 <= std_logic_vector(shift_left(unsigned(m_reg_181),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    omega2_1_cast_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega2_1_reg_1179),32));
    omega2_1_fu_922_p0 <= ap_const_lv29_9B1(13 - 1 downto 0);
    omega2_1_fu_922_p1 <= omega2_1_fu_922_p10(16 - 1 downto 0);
    omega2_1_fu_922_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega2_cast1_fu_793_p1),29));
        omega2_cast1_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_omega2_phi_fu_277_p4),16));

        omega4_cast4_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(omega4_reg_193),16));

    omega4_cast_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega4_cast4_fu_486_p1),32));
        omega_1_cast3_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_omega_1_phi_fu_231_p4),16));

        omega_2_cast2_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_omega_2_phi_fu_254_p4),16));

    omega_3_fu_690_p1 <= omega4_cast_reg_981(16 - 1 downto 0);
    omega_3_fu_690_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(primrt_1_reg_956) * signed('0' &omega_3_fu_690_p1))), 32));
    omega_4_cast_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_4_reg_1174),32));
    omega_4_fu_916_p0 <= ap_const_lv29_9B1(13 - 1 downto 0);
    omega_4_fu_916_p1 <= omega_4_fu_916_p10(16 - 1 downto 0);
    omega_4_fu_916_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_2_cast2_fu_789_p1),29));
    omega_cast_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_reg_1105),32));
    omega_fu_904_p0 <= ap_const_lv29_B40(13 - 1 downto 0);
    omega_fu_904_p1 <= omega_fu_904_p10(16 - 1 downto 0);
    omega_fu_904_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_1_cast3_fu_694_p1),29));
    p_lshr_f_fu_460_p4 <= m_reg_181(31 downto 1);
    p_lshr_fu_440_p4 <= p_neg_fu_434_p2(31 downto 1);
    p_neg_fu_434_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(m_reg_181));
    p_neg_t_fu_454_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_41_fu_450_p1));
        p_trunc21_ext_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_284_ap_return),16));

        p_trunc22_ext_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_284_ap_return),16));

        p_trunc23_ext_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_284_ap_return),16));

        p_trunc24_ext_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_284_ap_return),16));

        p_trunc25_ext_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_284_ap_return),16));

        p_trunc26_ext_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_300),16));

        p_trunc27_ext_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_300),16));

        p_trunc_ext_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_284_ap_return),16));

    primrt_1_fu_418_p3 <= 
        sel_tmp11_cast_fu_404_p3 when (tmp_29_fu_412_p2(0) = '1') else 
        sel_tmp9_fu_384_p3;
    sel_tmp11_cast_fu_404_p3 <= 
        ap_const_lv32_1E00 when (sel_tmp7_fu_398_p2(0) = '1') else 
        ap_const_lv32_D37;
    sel_tmp1_fu_316_p3 <= 
        ap_const_lv32_19C9 when (sel_tmp_fu_310_p2(0) = '1') else 
        primrt_reg_170;
    sel_tmp2_fu_324_p2 <= "1" when (m_reg_181 = ap_const_lv32_40) else "0";
    sel_tmp3_cast_fu_336_p3 <= 
        ap_const_lv32_1DA0 when (sel_tmp4_fu_330_p2(0) = '1') else 
        ap_const_lv32_19A9;
    sel_tmp3_fu_392_p2 <= "1" when (m_reg_181 = ap_const_lv32_4) else "0";
    sel_tmp4_fu_330_p2 <= "1" when (m_reg_181 = ap_const_lv32_20) else "0";
    sel_tmp5_fu_350_p3 <= 
        sel_tmp3_cast_fu_336_p3 when (tmp_27_fu_344_p2(0) = '1') else 
        sel_tmp1_fu_316_p3;
    sel_tmp6_fu_358_p2 <= "1" when (m_reg_181 = ap_const_lv32_10) else "0";
    sel_tmp7_cast_fu_370_p3 <= 
        ap_const_lv32_167C when (sel_tmp8_fu_364_p2(0) = '1') else 
        ap_const_lv32_6C0;
    sel_tmp7_fu_398_p2 <= "1" when (m_reg_181 = ap_const_lv32_2) else "0";
    sel_tmp8_fu_364_p2 <= "1" when (m_reg_181 = ap_const_lv32_8) else "0";
    sel_tmp9_fu_384_p3 <= 
        sel_tmp7_cast_fu_370_p3 when (tmp_28_fu_378_p2(0) = '1') else 
        sel_tmp5_fu_350_p3;
    sel_tmp_fu_310_p2 <= "1" when (m_reg_181 = ap_const_lv32_80) else "0";
    t1_1_cast_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_1_trunc_ext_fu_751_p1),17));
    t1_1_fu_894_p0 <= omega4_cast_reg_981(16 - 1 downto 0);
    t1_1_fu_894_p1 <= t1_1_fu_894_p10(16 - 1 downto 0);
    t1_1_fu_894_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),32));
        t1_1_trunc_ext_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_294),16));

    t1_3_cast_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_3_trunc_ext_fu_608_p1),17));
        t1_3_trunc_ext_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_284_ap_return),16));

    t1_fu_910_p0 <= t1_fu_910_p00(16 - 1 downto 0);
    t1_fu_910_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),32));
    t1_fu_910_p1 <= t1_fu_910_p10(16 - 1 downto 0);
    t1_fu_910_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_1_cast3_reg_1086),32));
    t2_1_cast_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t2_1_trunc_ext_fu_631_p1),17));
        t2_1_trunc_ext_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_284_ap_return),16));

    t2_fu_899_p0 <= omega4_cast_reg_981(16 - 1 downto 0);
    t2_fu_899_p1 <= t2_fu_899_p10(16 - 1 downto 0);
    t2_fu_899_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),32));
    tmp_104_fu_426_p3 <= m_reg_181(31 downto 31);
    tmp_105_fu_482_p1 <= tmp_45_fu_474_p3(31 - 1 downto 0);
    tmp_106_fu_698_p3 <= ap_phi_mux_j_1_phi_fu_242_p4(8 downto 8);
    tmp_108_fu_710_p1 <= ap_phi_mux_j_1_phi_fu_242_p4(8 - 1 downto 0);
    tmp_109_fu_515_p4 <= k_reg_216(31 downto 7);
    tmp_110_fu_797_p3 <= ap_phi_mux_j_2_phi_fu_265_p4(8 downto 8);
    tmp_111_fu_531_p1 <= k_reg_216(31 - 1 downto 0);
    tmp_112_fu_809_p1 <= ap_phi_mux_j_2_phi_fu_265_p4(8 - 1 downto 0);
    tmp_116_cast_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_73_reg_1041),32));
        tmp_118_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_75_reg_1046),32));

    tmp_120_cast_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_reg_1056),32));
        tmp_122_cast_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_79_reg_1061),32));

    tmp_27_fu_344_p2 <= (sel_tmp4_fu_330_p2 or sel_tmp2_fu_324_p2);
    tmp_28_fu_378_p2 <= (sel_tmp8_fu_364_p2 or sel_tmp6_fu_358_p2);
    tmp_29_fu_412_p2 <= (sel_tmp7_fu_398_p2 or sel_tmp3_fu_392_p2);
    tmp_41_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_fu_440_p4),32));
    tmp_42_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_fu_460_p4),32));
    tmp_45_fu_474_p3 <= 
        p_neg_t_fu_454_p2 when (tmp_104_fu_426_p3(0) = '1') else 
        tmp_42_fu_470_p1;
    tmp_46_fu_494_p2 <= "1" when (signed(j4_cast_fu_490_p1) < signed(tmp_45_reg_962)) else "0";
    tmp_48_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_1_phi_fu_242_p4),64));
    tmp_49_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_719_p2),64));
    tmp_52_fu_759_p2 <= std_logic_vector(unsigned(t1_1_cast_fu_755_p1) + unsigned(u1_cast_fu_747_p1));
    tmp_54_fu_765_p2 <= std_logic_vector(unsigned(u1_cast_fu_747_p1) - unsigned(t1_1_cast_fu_755_p1));
    tmp_58_fu_535_p2 <= std_logic_vector(unsigned(j4_reg_204) + unsigned(tmp_111_fu_531_p1));
    tmp_59_fu_541_p3 <= (tmp_58_fu_535_p2 & ap_const_lv1_0);
    tmp_60_fu_549_p2 <= (tmp_59_fu_541_p3 or ap_const_lv32_1);
        tmp_62_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_60_fu_549_p2),64));

        tmp_65_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_59_fu_541_p3),64));

    tmp_66_fu_565_p2 <= std_logic_vector(unsigned(tmp_105_reg_967) + unsigned(tmp_58_fu_535_p2));
    tmp_67_fu_570_p3 <= (tmp_66_fu_565_p2 & ap_const_lv1_0);
    tmp_68_fu_578_p2 <= (tmp_67_fu_570_p3 or ap_const_lv32_1);
        tmp_69_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_68_fu_578_p2),64));

        tmp_72_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_67_fu_570_p3),64));

    tmp_73_fu_619_p2 <= std_logic_vector(unsigned(u1_1_cast_fu_616_p1) + unsigned(t1_3_cast_fu_612_p1));
    tmp_75_fu_625_p2 <= std_logic_vector(unsigned(u1_1_cast_fu_616_p1) - unsigned(t1_3_cast_fu_612_p1));
    tmp_76_cast_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_reg_1130),32));
    tmp_77_fu_646_p2 <= std_logic_vector(unsigned(u2_cast_fu_639_p1) + unsigned(t2_1_cast_fu_635_p1));
        tmp_78_cast_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_54_reg_1135),32));

    tmp_79_fu_652_p2 <= std_logic_vector(unsigned(u2_cast_fu_639_p1) - unsigned(t2_1_cast_fu_635_p1));
    tmp_82_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_2_phi_fu_265_p4),64));
    tmp_84_fu_928_p0 <= tmp_84_fu_928_p00(16 - 1 downto 0);
    tmp_84_fu_928_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),32));
    tmp_84_fu_928_p1 <= tmp_84_fu_928_p10(16 - 1 downto 0);
    tmp_84_fu_928_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_2_cast2_reg_1150),32));
    tmp_86_fu_940_p0 <= ap_const_lv30_1DE3(14 - 1 downto 0);
    tmp_86_fu_940_p1 <= tmp_86_fu_940_p10(16 - 1 downto 0);
    tmp_86_fu_940_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_trunc_ext_fu_860_p1),30));
        tmp_87_trunc_ext_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_284_ap_return),16));

    tmp_88_cast_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_reg_1219),32));
    tmp_88_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_fu_829_p2),64));
    tmp_90_fu_934_p0 <= tmp_90_fu_934_p00(16 - 1 downto 0);
    tmp_90_fu_934_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),32));
    tmp_90_fu_934_p1 <= tmp_90_fu_934_p10(16 - 1 downto 0);
    tmp_90_fu_934_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega2_cast1_reg_1155),32));
    tmp_92_fu_946_p0 <= ap_const_lv30_1DE3(14 - 1 downto 0);
    tmp_92_fu_946_p1 <= tmp_92_fu_946_p10(16 - 1 downto 0);
    tmp_92_fu_946_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_trunc_ext_fu_872_p1),30));
        tmp_94_trunc_ext_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_mod_r_fu_284_ap_return),16));

    tmp_95_cast_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_reg_1229),32));
    tmp_fu_304_p2 <= "1" when (signed(m_reg_181) < signed(ap_const_lv32_81)) else "0";
    u1_1_cast_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_load_6_reg_1031),17));
    u1_cast_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),17));
    u2_cast_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_load_8_reg_1036),17));
end behav;
